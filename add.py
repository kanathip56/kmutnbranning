<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>FitTracker Thailand - ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body {
            box-sizing: border-box;
        }
        .gradient-bg {
            background: linear-gradient;
        }
        .card-shadow {
            box-shadow: 0 10px 25px rgba(0,0,0,0.1);
        }
        .animate-bounce-slow {
            animation: bounce 2s infinite;
        }
        .chart-container {
            position: relative;
            height: 300px;
            width: 100%;
        }
        .autocomplete-dropdown {
            position: absolute;
            top: 100%;
            left: 0;
            right: 0;
            background: white;
            border: 1px solid #d1d5db;
            border-top: none;
            border-radius: 0 0 0.5rem 0.5rem;
            max-height: 200px;
            overflow-y: auto;
            z-index: 1000;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
        }
        .autocomplete-item {
            padding: 0.75rem 1rem;
            cursor: pointer;
            border-bottom: 1px solid #f3f4f6;
        }
        .autocomplete-item:hover {
            background-color: #f3f4f6;
        }
        .autocomplete-item.selected {
            background-color: #dbeafe;
            color: #1d4ed8;
        }
        .custom-location {
            background-color: #fef3c7;
            border-left: 3px solid #f59e0b;
        }
    </style>
</head>
<body class="gradient-bg min-h-screen">
    <!-- Login/Register Screen -->
    <div id="loginScreen" class="min-h-screen flex items-center justify-center p-4">
        <div class="bg-white rounded-2xl card-shadow p-8 w-full max-w-4xl">
            <div class="text-center mb-8">
                <!-- Language Selector -->
                <div class="flex justify-end mb-4">
                    <select id="languageSelector" class="px-3 py-2 border border-gray-300 rounded-lg text-sm">
                        <option value="th">üáπüá≠ ‡πÑ‡∏ó‡∏¢</option>
                        <option value="en">üá∫üá∏ English</option>
                    </select>
                </div>
                
                <h1 id="appTitle" class="text-4xl font-bold text-gray-800 mb-2">üèÉ‚Äç‚ôÇÔ∏è FitTracker Thailand</h1>
                <p id="appSubtitle" class="text-gray-600">‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢</p>
            </div>
            
            <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
                <!-- Login Form -->
                <div class="space-y-6">
                    <h2 class="text-2xl font-bold text-gray-800 text-center" data-translate="login">‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö</h2>
                    
                    <form id="loginForm" class="space-y-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2" data-translate="username">‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ</label>
                            <input type="text" id="loginUsername" required class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent" placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ">
                        </div>
                        
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2" data-translate="password">‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô</label>
                            <input type="password" id="loginPassword" required class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent" placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô">
                        </div>
                        
                        <button type="submit" class="w-full bg-blue-600 hover:bg-blue-700 text-white font-semibold py-3 px-6 rounded-lg transition duration-200" data-translate="loginBtn">
                            ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
                        </button>
                    </form>
                    
                    <div class="text-center">
                        <p class="text-sm text-gray-600" data-translate="demoText">‡∏ó‡∏î‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ: username: <strong>demo</strong>, password: <strong>1234</strong></p>
                    </div>
                </div>
                
                <!-- Register Form -->
                <div class="space-y-6 border-l border-gray-200 pl-8">
                    <h2 class="text-2xl font-bold text-gray-800 text-center" data-translate="register">‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å</h2>
                    
                    <form id="registerForm" class="space-y-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2" data-translate="username">‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ</label>
                            <input type="text" id="registerUsername" required class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent" placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 3 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)">
                        </div>
                        
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2" data-translate="password">‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô</label>
                            <input type="password" id="registerPassword" required class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent" placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô (‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 4 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)">
                        </div>
                        
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2" data-translate="confirmPassword">‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô</label>
                            <input type="password" id="confirmPassword" required class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent" placeholder="‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô">
                        </div>
                        
                        <button type="submit" class="w-full bg-green-600 hover:bg-green-700 text-white font-semibold py-3 px-6 rounded-lg transition duration-200" data-translate="registerBtn">
                            ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
                        </button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Main App -->
    <div id="mainApp" class="hidden min-h-screen">
        <!-- Navigation -->
        <nav class="bg-white shadow-lg">
            <div class="max-w-7xl mx-auto px-4">
                <div class="flex justify-between items-center py-4">
                    <div class="flex items-center space-x-4">
                        <h1 class="text-2xl font-bold text-gray-800">üèÉ‚Äç‚ôÇÔ∏è FitTracker Thailand</h1>
                        <span id="welcomeUser" class="text-gray-600"></span>
                    </div>
                    
                    <div class="flex space-x-4">
                        <button id="runningTab" class="px-4 py-2 bg-blue-600 text-white rounded-lg font-medium" data-translate="running">‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πà‡∏á</button>
                        <button id="gymTab" class="px-4 py-2 bg-gray-200 text-gray-700 rounded-lg font-medium hover:bg-gray-300" data-translate="gym">‡πÄ‡∏ß‡∏ó/‡∏Ñ‡∏≤‡∏£‡πå‡∏î‡∏¥‡πÇ‡∏≠</button>
                        <button id="statsTab" class="px-4 py-2 bg-gray-200 text-gray-700 rounded-lg font-medium hover:bg-gray-300" data-translate="stats">‡∏Å‡∏£‡∏≤‡∏ü‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥</button>
                        <button id="leaderboardTab" class="px-4 py-2 bg-gray-200 text-gray-700 rounded-lg font-medium hover:bg-gray-300" data-translate="leaderboard">‡∏à‡∏±‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö</button>
                        <button id="logoutBtn" class="px-4 py-2 bg-red-500 text-white rounded-lg font-medium hover:bg-red-600" data-translate="logout">‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö</button>
                    </div>
                </div>
            </div>
        </nav>

        <!-- Running Calculator -->
        <div id="runningSection" class="max-w-7xl mx-auto p-6">
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
                <!-- Calculator -->
                <div class="bg-white rounded-2xl card-shadow p-6">
                    <h2 class="text-2xl font-bold text-gray-800 mb-6">üèÉ‚Äç‚ôÇÔ∏è ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πà‡∏á</h2>
                    
                    <form id="runningForm" class="space-y-6">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2" data-translate="weight">‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å (‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°)</label>
                            <input type="number" id="weight" required class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500" placeholder="‡πÄ‡∏ä‡πà‡∏ô 70">
                        </div>
                        
                        <div class="relative">
                            <label class="block text-sm font-medium text-gray-700 mb-2" data-translate="province">‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î</label>
                            <input type="text" id="provinceInput" required class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500" placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î..." autocomplete="off">
                            <div id="provinceDropdown" class="autocomplete-dropdown hidden"></div>
                            <input type="hidden" id="selectedProvince">
                        </div>
                        
                        <div class="relative">
                            <label class="block text-sm font-medium text-gray-700 mb-2" data-translate="location">‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡∏¥‡πà‡∏á (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)</label>
                            <input type="text" id="locationInput" disabled class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 disabled:bg-gray-100" placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏Å‡πà‡∏≠‡∏ô..." autocomplete="off">
                            <div id="locationDropdown" class="autocomplete-dropdown hidden"></div>
                            <input type="hidden" id="selectedLocation">
                        </div>
                        
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2" data-translate="distance">‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á</label>
                            <div class="flex space-x-2">
                                <input type="number" id="distance" step="0.1" required class="flex-1 px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500" placeholder="‡πÄ‡∏ä‡πà‡∏ô 3.1">
                                <select id="distanceUnit" class="px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                                    <option value="km" data-translate="km">‡∏Å‡∏¥‡πÇ‡∏•‡πÄ‡∏°‡∏ï‡∏£</option>
                                    <option value="m" data-translate="m">‡πÄ‡∏°‡∏ï‡∏£</option>
                                </select>
                            </div>
                        </div>
                        
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2" data-translate="speed">‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß</label>
                            <select id="runningSpeed" required class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                                <option value="" data-translate="selectSpeed">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß</option>
                                <option value="slow" data-translate="slow">‡πÄ‡∏î‡∏¥‡∏ô‡πÄ‡∏£‡πá‡∏ß/‡∏ß‡∏¥‡πà‡∏á‡∏ä‡πâ‡∏≤ (5-6 ‡∏Å‡∏°./‡∏ä‡∏°.)</option>
                                <option value="moderate" data-translate="moderate">‡∏ß‡∏¥‡πà‡∏á‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á (7-8 ‡∏Å‡∏°./‡∏ä‡∏°.)</option>
                                <option value="fast" data-translate="fast">‡∏ß‡∏¥‡πà‡∏á‡πÄ‡∏£‡πá‡∏ß (9-10 ‡∏Å‡∏°./‡∏ä‡∏°.)</option>
                                <option value="very_fast" data-translate="very_fast">‡∏ß‡∏¥‡πà‡∏á‡πÄ‡∏£‡πá‡∏ß‡∏°‡∏≤‡∏Å (11+ ‡∏Å‡∏°./‡∏ä‡∏°.)</option>
                            </select>
                        </div>
                        
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2" data-translate="rounds">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≠‡∏ö</label>
                            <input type="number" id="rounds" required class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500" placeholder="‡πÄ‡∏ä‡πà‡∏ô 2" value="1">
                        </div>
                        
                        <button type="submit" class="w-full bg-green-600 hover:bg-green-700 text-white font-semibold py-3 px-6 rounded-lg transition duration-200" data-translate="calculate">
                            ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà
                        </button>
                    </form>
                    
                    <div id="runningResult" class="hidden mt-6 p-4 bg-green-50 border border-green-200 rounded-lg">
                        <h3 class="font-semibold text-green-800 mb-2">‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì</h3>
                        <div id="runningCalories" class="text-2xl font-bold text-green-600"></div>
                        <div id="runningDetails" class="text-sm text-green-700 mt-2"></div>
                    </div>
                </div>
                
                <!-- Weekly Stats -->
                <div class="bg-white rounded-2xl card-shadow p-6">
                    <h2 class="text-2xl font-bold text-gray-800 mb-6">üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ô‡∏µ‡πâ</h2>
                    
                    <div class="space-y-4">
                        <div class="flex justify-between items-center p-4 bg-blue-50 rounded-lg">
                            <span class="font-medium text-blue-800">‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏£‡∏ß‡∏°</span>
                            <span id="weeklyCalories" class="text-2xl font-bold text-blue-600">0 kcal</span>
                        </div>
                        
                        <div class="flex justify-between items-center p-4 bg-purple-50 rounded-lg">
                            <span class="font-medium text-purple-800">‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏£‡∏ß‡∏°</span>
                            <span id="weeklyDistance" class="text-2xl font-bold text-purple-600">0 km</span>
                        </div>
                        
                        <div class="flex justify-between items-center p-4 bg-orange-50 rounded-lg">
                            <span class="font-medium text-orange-800">‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÉ‡∏ô‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î</span>
                            <span id="provinceRank" class="text-2xl font-bold text-orange-600">-</span>
                        </div>
                        
                        <div class="flex justify-between items-center p-4 bg-red-50 rounded-lg">
                            <span class="font-medium text-red-800">‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®</span>
                            <span id="nationalRank" class="text-2xl font-bold text-red-600">-</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Gym/Cardio Calculator -->
        <div id="gymSection" class="hidden max-w-7xl mx-auto p-6">
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
                <!-- Calculator -->
                <div class="bg-white rounded-2xl card-shadow p-6">
                    <h2 class="text-2xl font-bold text-gray-800 mb-6">üí™ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡πÄ‡∏ß‡∏ó/‡∏Ñ‡∏≤‡∏£‡πå‡∏î‡∏¥‡πÇ‡∏≠</h2>
                    
                    <form id="gymForm" class="space-y-6">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å (‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°)</label>
                            <input type="number" id="gymWeight" required class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500" placeholder="‡πÄ‡∏ä‡πà‡∏ô 70">
                        </div>
                        
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢</label>
                            <select id="exerciseType" required class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                                <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó</option>
                                <option value="pushup">‡∏î‡∏±‡∏ô‡∏û‡∏∑‡πâ‡∏ô (Push-ups)</option>
                                <option value="situp">‡∏ã‡∏¥‡∏ó‡∏≠‡∏±‡∏û (Sit-ups)</option>
                                <option value="squat">‡∏™‡∏Ñ‡∏ß‡∏≠‡∏ó (Squats)</option>
                                <option value="pullup">‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠ (Pull-ups)</option>
                                <option value="plank">‡πÅ‡∏û‡∏•‡∏á‡∏Ñ‡πå (Plank)</option>
                                <option value="burpee">‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏õ‡∏µ‡πâ (Burpees)</option>
                                <option value="jumpingjack">‡∏Å‡∏£‡∏∞‡πÇ‡∏î‡∏î‡∏Å‡∏ö (Jumping Jacks)</option>
                            </select>
                        </div>
                        
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á/‡∏ô‡∏≤‡∏ó‡∏µ</label>
                            <input type="number" id="reps" required class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500" placeholder="‡πÄ‡∏ä‡πà‡∏ô 15">
                        </div>
                        
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ã‡πá‡∏ï</label>
                            <input type="number" id="sets" required class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500" placeholder="‡πÄ‡∏ä‡πà‡∏ô 3" value="1">
                        </div>
                        
                        <button type="submit" class="w-full bg-purple-600 hover:bg-purple-700 text-white font-semibold py-3 px-6 rounded-lg transition duration-200">
                            ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà
                        </button>
                    </form>
                    
                    <div id="gymResult" class="hidden mt-6 p-4 bg-purple-50 border border-purple-200 rounded-lg">
                        <h3 class="font-semibold text-purple-800 mb-2">‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì</h3>
                        <div id="gymCalories" class="text-2xl font-bold text-purple-600"></div>
                        <div id="gymDetails" class="text-sm text-purple-700 mt-2"></div>
                    </div>
                </div>
                
                <!-- Gym Weekly Stats -->
                <div class="bg-white rounded-2xl card-shadow p-6">
                    <h2 class="text-2xl font-bold text-gray-800 mb-6">üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏ß‡∏ó/‡∏Ñ‡∏≤‡∏£‡πå‡∏î‡∏¥‡πÇ‡∏≠</h2>
                    
                    <div class="space-y-4">
                        <div class="flex justify-between items-center p-4 bg-purple-50 rounded-lg">
                            <span class="font-medium text-purple-800">‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏£‡∏ß‡∏°</span>
                            <span id="weeklyGymCalories" class="text-2xl font-bold text-purple-600">0 kcal</span>
                        </div>
                        
                        <div class="flex justify-between items-center p-4 bg-indigo-50 rounded-lg">
                            <span class="font-medium text-indigo-800">‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏ß‡∏°</span>
                            <span id="weeklySets" class="text-2xl font-bold text-indigo-600">0 sets</span>
                        </div>
                        
                        <div class="flex justify-between items-center p-4 bg-pink-50 rounded-lg">
                            <span class="font-medium text-pink-800">‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÄ‡∏ß‡∏ó/‡∏Ñ‡∏≤‡∏£‡πå‡∏î‡∏¥‡πÇ‡∏≠</span>
                            <span id="gymRank" class="text-2xl font-bold text-pink-600">-</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Statistics Charts -->
        <div id="statsSection" class="hidden max-w-7xl mx-auto p-6">
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
                <!-- Weekly Calories Chart -->
                <div class="bg-white rounded-2xl card-shadow p-6">
                    <h2 class="text-2xl font-bold text-gray-800 mb-6">üìä ‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå</h2>
                    <div class="chart-container">
                        <canvas id="weeklyCaloriesChart"></canvas>
                    </div>
                </div>
                
                <!-- Exercise Distribution -->
                <div class="bg-white rounded-2xl card-shadow p-6">
                    <h2 class="text-2xl font-bold text-gray-800 mb-6">ü•ß ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢</h2>
                    <div class="chart-container">
                        <canvas id="exerciseDistributionChart"></canvas>
                    </div>
                </div>
                
                <!-- Daily Progress -->
                <div class="bg-white rounded-2xl card-shadow p-6">
                    <h2 class="text-2xl font-bold text-gray-800 mb-6">üìà ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πâ‡∏≤‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô</h2>
                    <div class="chart-container">
                        <canvas id="dailyProgressChart"></canvas>
                    </div>
                </div>
                
                <!-- Province Comparison -->
                <div class="bg-white rounded-2xl card-shadow p-6">
                    <h2 class="text-2xl font-bold text-gray-800 mb-6">üó∫Ô∏è ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î</h2>
                    <div class="chart-container">
                        <canvas id="provinceComparisonChart"></canvas>
                    </div>
                </div>
            </div>
        </div>

        <!-- Leaderboard -->
        <div id="leaderboardSection" class="hidden max-w-7xl mx-auto p-6">
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
                <!-- Running Leaderboard -->
                <div class="bg-white rounded-2xl card-shadow p-6">
                    <h2 class="text-2xl font-bold text-gray-800 mb-6">üèÜ ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πà‡∏á</h2>
                    
                    <div class="mb-4">
                        <select id="leaderboardFilter" class="px-4 py-2 border border-gray-300 rounded-lg">
                            <option value="national">‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®</option>
                            <option value="province">‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î</option>
                        </select>
                    </div>
                    
                    <div class="overflow-x-auto">
                        <table class="w-full">
                            <thead>
                                <tr class="border-b border-gray-200">
                                    <th class="text-left py-3 px-2">‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö</th>
                                    <th class="text-left py-3 px-2">‡∏ä‡∏∑‡πà‡∏≠</th>
                                    <th class="text-left py-3 px-2">‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà</th>
                                    <th class="text-left py-3 px-2">‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á</th>
                                </tr>
                            </thead>
                            <tbody id="runningLeaderboard">
                                <!-- Dynamic content -->
                            </tbody>
                        </table>
                    </div>
                </div>
                
                <!-- Gym Leaderboard -->
                <div class="bg-white rounded-2xl card-shadow p-6">
                    <h2 class="text-2xl font-bold text-gray-800 mb-6">üí™ ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÄ‡∏ß‡∏ó/‡∏Ñ‡∏≤‡∏£‡πå‡∏î‡∏¥‡πÇ‡∏≠</h2>
                    
                    <div class="overflow-x-auto">
                        <table class="w-full">
                            <thead>
                                <tr class="border-b border-gray-200">
                                    <th class="text-left py-3 px-2">‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö</th>
                                    <th class="text-left py-3 px-2">‡∏ä‡∏∑‡πà‡∏≠</th>
                                    <th class="text-left py-3 px-2">‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà</th>
                                    <th class="text-left py-3 px-2">‡πÄ‡∏ã‡πá‡∏ï</th>
                                </tr>
                            </thead>
                            <tbody id="gymLeaderboard">
                                <!-- Dynamic content -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Data Storage
        let currentUser = null;
        let users = JSON.parse(localStorage.getItem('fitTrackerUsers')) || {};
        let runningData = JSON.parse(localStorage.getItem('runningData')) || [];
        let gymData = JSON.parse(localStorage.getItem('gymData')) || [];
        let currentLanguage = localStorage.getItem('fitTrackerLanguage') || 'th';
        let customLocations = JSON.parse(localStorage.getItem('customLocations')) || {};
        
        // Chart instances
        let weeklyCaloriesChart = null;
        let exerciseDistributionChart = null;
        let dailyProgressChart = null;
        let provinceComparisonChart = null;

        // Speed multipliers for calorie calculation
        const speedMultipliers = {
            'slow': 0.8,      // ‡πÄ‡∏î‡∏¥‡∏ô‡πÄ‡∏£‡πá‡∏ß/‡∏ß‡∏¥‡πà‡∏á‡∏ä‡πâ‡∏≤
            'moderate': 1.0,  // ‡∏ß‡∏¥‡πà‡∏á‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á (base)
            'fast': 1.3,      // ‡∏ß‡∏¥‡πà‡∏á‡πÄ‡∏£‡πá‡∏ß
            'very_fast': 1.6  // ‡∏ß‡∏¥‡πà‡∏á‡πÄ‡∏£‡πá‡∏ß‡∏°‡∏≤‡∏Å
        };

        // Exercise calorie rates (calories per rep per kg) - ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏™‡∏°‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏∂‡πâ‡∏ô
        const exerciseRates = {
            'pushup': 0.05,     // ‡∏î‡∏±‡∏ô‡∏û‡∏∑‡πâ‡∏ô 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‚âà 3.5 ‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà (70 ‡∏Å‡∏Å.)
            'situp': 0.04,      // ‡∏ã‡∏¥‡∏ó‡∏≠‡∏±‡∏û 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‚âà 2.8 ‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà (70 ‡∏Å‡∏Å.)
            'squat': 0.06,      // ‡∏™‡∏Ñ‡∏ß‡∏≠‡∏ó 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‚âà 4.2 ‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà (70 ‡∏Å‡∏Å.)
            'pullup': 0.12,     // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠ 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‚âà 8.4 ‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà (70 ‡∏Å‡∏Å.) - ‡∏´‡∏ô‡∏±‡∏Å‡∏Å‡∏ß‡πà‡∏≤
            'plank': 0.8,       // ‡πÅ‡∏û‡∏•‡∏á‡∏Ñ‡πå‡∏ï‡πà‡∏≠‡∏ô‡∏≤‡∏ó‡∏µ ‚âà 56 ‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà (70 ‡∏Å‡∏Å.)
            'burpee': 0.15,     // ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏õ‡∏µ‡πâ 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‚âà 10.5 ‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà (70 ‡∏Å‡∏Å.) - ‡πÄ‡∏ú‡∏≤‡∏ú‡∏•‡∏≤‡∏ç‡∏™‡∏π‡∏á
            'jumpingjack': 0.03 // ‡∏Å‡∏£‡∏∞‡πÇ‡∏î‡∏î‡∏Å‡∏ö 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‚âà 2.1 ‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà (70 ‡∏Å‡∏Å.)
        };

        // Language translations
        const translations = {
            th: {
                appTitle: 'üèÉ‚Äç‚ôÇÔ∏è FitTracker Thailand',
                appSubtitle: '‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢',
                login: '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö',
                register: '‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å',
                username: '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ',
                password: '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô',
                confirmPassword: '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô',
                loginBtn: '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö',
                registerBtn: '‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å',
                demoText: '‡∏ó‡∏î‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ: username: demo, password: 1234',
                running: '‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πà‡∏á',
                gym: '‡πÄ‡∏ß‡∏ó/‡∏Ñ‡∏≤‡∏£‡πå‡∏î‡∏¥‡πÇ‡∏≠',
                stats: '‡∏Å‡∏£‡∏≤‡∏ü‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥',
                leaderboard: '‡∏à‡∏±‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö',
                logout: '‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö',
                weight: '‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å (‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°)',
                province: '‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î',
                location: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡∏¥‡πà‡∏á (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)',
                distance: '‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á',
                speed: '‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß',
                rounds: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≠‡∏ö',
                calculate: '‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà',
                km: '‡∏Å‡∏¥‡πÇ‡∏•‡πÄ‡∏°‡∏ï‡∏£',
                m: '‡πÄ‡∏°‡∏ï‡∏£',
                slow: '‡πÄ‡∏î‡∏¥‡∏ô‡πÄ‡∏£‡πá‡∏ß/‡∏ß‡∏¥‡πà‡∏á‡∏ä‡πâ‡∏≤ (5-6 ‡∏Å‡∏°./‡∏ä‡∏°.)',
                moderate: '‡∏ß‡∏¥‡πà‡∏á‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á (7-8 ‡∏Å‡∏°./‡∏ä‡∏°.)',
                fast: '‡∏ß‡∏¥‡πà‡∏á‡πÄ‡∏£‡πá‡∏ß (9-10 ‡∏Å‡∏°./‡∏ä‡∏°.)',
                very_fast: '‡∏ß‡∏¥‡πà‡∏á‡πÄ‡∏£‡πá‡∏ß‡∏°‡∏≤‡∏Å (11+ ‡∏Å‡∏°./‡∏ä‡∏°.)',
                selectSpeed: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß'
            },
            en: {
                appTitle: 'üèÉ‚Äç‚ôÇÔ∏è FitTracker Thailand',
                appSubtitle: 'Exercise Calorie Calculator System',
                login: 'Login',
                register: 'Register',
                username: 'Username',
                password: 'Password',
                confirmPassword: 'Confirm Password',
                loginBtn: 'Login',
                registerBtn: 'Register',
                demoText: 'Demo: username: demo, password: 1234',
                running: 'Running',
                gym: 'Gym/Cardio',
                stats: 'Statistics',
                leaderboard: 'Leaderboard',
                logout: 'Logout',
                weight: 'Weight (kg)',
                province: 'Province',
                location: 'Running Location (Optional)',
                distance: 'Distance',
                speed: 'Speed Level',
                rounds: 'Rounds',
                calculate: 'Calculate Calories',
                km: 'Kilometers',
                m: 'Meters',
                slow: 'Fast Walk/Slow Run (5-6 km/h)',
                moderate: 'Moderate Run (7-8 km/h)',
                fast: 'Fast Run (9-10 km/h)',
                very_fast: 'Very Fast Run (11+ km/h)',
                selectSpeed: 'Select Speed Level'
            }
        };

        // Province and Location Data (77 provinces complete)
        const provinceData = {
            '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£': ['‡∏™‡∏ß‡∏ô‡∏•‡∏∏‡∏°‡∏û‡∏¥‡∏ô‡∏µ', '‡∏™‡∏ß‡∏ô‡∏à‡∏ï‡∏∏‡∏à‡∏±‡∏Å‡∏£', '‡∏™‡∏ß‡∏ô‡πÄ‡∏ö‡∏ç‡∏à‡∏Å‡∏¥‡∏ï‡∏¥', '‡∏™‡∏ß‡∏ô‡∏£‡∏ñ‡πÑ‡∏ü', '‡∏™‡∏ß‡∏ô‡∏™‡∏£‡∏≤‡∏ç‡∏£‡∏°‡∏¢‡πå'],
            '‡∏Å‡∏£‡∏∞‡∏ö‡∏µ‡πà': ['‡∏´‡∏≤‡∏î‡∏≠‡πà‡∏≤‡∏ß‡∏ô‡∏≤‡∏á', '‡πÄ‡∏Å‡∏≤‡∏∞‡∏û‡∏µ‡∏û‡∏µ', '‡∏ñ‡πâ‡∏≥‡πÄ‡∏™‡∏∑‡∏≠', '‡∏´‡∏≤‡∏î‡πÑ‡∏£‡πà‡πÄ‡∏•‡∏¢‡πå', '‡πÄ‡∏Å‡∏≤‡∏∞‡∏õ‡∏≠‡∏î‡∏∞'],
            '‡∏Å‡∏≤‡∏ç‡∏à‡∏ô‡∏ö‡∏∏‡∏£‡∏µ': ['‡∏™‡∏∞‡∏û‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡πâ‡∏≥‡πÅ‡∏Ñ‡∏ß', '‡∏≠‡∏∏‡∏ó‡∏¢‡∏≤‡∏ô‡πÅ‡∏´‡πà‡∏á‡∏ä‡∏≤‡∏ï‡∏¥‡πÄ‡∏≠‡∏£‡∏≤‡∏ß‡∏±‡∏ì', '‡∏ñ‡πâ‡∏≥‡πÄ‡∏ã‡πÄ‡∏ß‡πà‡∏ô', '‡∏ß‡∏±‡∏î‡∏ñ‡πâ‡∏≥‡πÄ‡∏™‡∏∑‡∏≠', '‡πÄ‡∏Ç‡∏∑‡πà‡∏≠‡∏ô‡∏®‡∏£‡∏µ‡∏ô‡∏Ñ‡∏£‡∏¥‡∏ô‡∏ó‡∏£‡πå'],
            '‡∏Å‡∏≤‡∏¨‡∏™‡∏¥‡∏ô‡∏ò‡∏∏‡πå': ['‡∏û‡∏£‡∏∞‡∏ò‡∏≤‡∏ï‡∏∏‡∏¢‡∏≤‡∏Ñ‡∏π', '‡∏•‡∏≥‡∏ô‡πâ‡∏≥‡∏ä‡∏µ', '‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞‡∏Å‡∏≤‡∏¨‡∏™‡∏¥‡∏ô‡∏ò‡∏∏‡πå', '‡∏ß‡∏±‡∏î‡∏Å‡∏•‡∏≤‡∏á‡∏°‡∏¥‡πà‡∏á‡πÄ‡∏°‡∏∑‡∏≠‡∏á', '‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡∏≤‡∏¨‡∏™‡∏¥‡∏ô‡∏ò‡∏∏‡πå'],
            '‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡πÄ‡∏û‡∏ä‡∏£': ['‡∏û‡∏£‡∏∞‡∏£‡∏≤‡∏ä‡∏ß‡∏±‡∏á‡∏à‡∏±‡∏Å‡∏£‡∏µ‡∏°‡∏´‡∏≤‡∏õ‡∏£‡∏≤‡∏™‡∏≤‡∏ó', '‡∏≠‡∏∏‡∏ó‡∏¢‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡πÄ‡∏û‡∏ä‡∏£', '‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡∏ò‡∏≤‡∏ï‡∏∏', '‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡πà‡∏≤', '‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞'],
            '‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô': ['‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô', '‡∏ö‡∏∂‡∏á‡πÅ‡∏Å‡πà‡∏ô‡∏ô‡∏Ñ‡∏£', '‡∏ñ‡∏ô‡∏ô‡∏®‡∏£‡∏µ‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå', '‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô', '‡∏ï‡∏•‡∏≤‡∏î‡∏ï‡πâ‡∏ô‡∏ï‡∏≤‡∏•'],
            '‡∏à‡∏±‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ': ['‡∏ï‡∏•‡∏≤‡∏î‡∏ô‡πâ‡∏≥‡∏Ñ‡∏•‡∏≠‡∏á‡∏™‡∏ß‡∏ô', '‡πÄ‡∏Å‡∏≤‡∏∞‡∏ä‡πâ‡∏≤‡∏á', '‡∏ô‡πâ‡∏≥‡∏ï‡∏Å‡∏û‡∏•‡∏¥‡πâ‡∏ß', '‡∏≠‡∏∏‡∏ó‡∏¢‡∏≤‡∏ô‡πÅ‡∏´‡πà‡∏á‡∏ä‡∏≤‡∏ï‡∏¥‡πÄ‡∏Ç‡∏≤‡∏Ñ‡∏¥‡∏ä‡∏å‡∏Å‡∏π‡∏è', '‡∏´‡∏≤‡∏î‡πÅ‡∏´‡∏•‡∏°‡∏™‡∏¥‡∏á‡∏´‡πå'],
            '‡∏â‡∏∞‡πÄ‡∏ä‡∏¥‡∏á‡πÄ‡∏ó‡∏£‡∏≤': ['‡∏ß‡∏±‡∏î‡πÇ‡∏™‡∏ò‡∏£‡∏ß‡∏£‡∏≤‡∏£‡∏≤‡∏°‡∏ß‡∏£‡∏ß‡∏¥‡∏´‡∏≤‡∏£', '‡∏ï‡∏•‡∏≤‡∏î‡∏ô‡πâ‡∏≥‡∏ö‡∏≤‡∏á‡∏ô‡πâ‡∏≥‡∏ú‡∏∂‡πâ‡∏á', '‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞', '‡∏ñ‡∏ô‡∏ô‡πÄ‡∏Å‡πà‡∏≤', '‡∏ß‡∏±‡∏î‡∏õ‡∏≤‡∏Å‡∏ô‡πâ‡∏≥'],
            '‡∏ä‡∏•‡∏ö‡∏∏‡∏£‡∏µ': ['‡∏´‡∏≤‡∏î‡∏û‡∏±‡∏ó‡∏¢‡∏≤', '‡πÄ‡∏Å‡∏≤‡∏∞‡∏•‡πâ‡∏≤‡∏ô', '‡∏™‡∏ß‡∏ô‡∏ô‡∏á‡∏ô‡∏∏‡∏ä', '‡∏ï‡∏•‡∏≤‡∏î‡∏ô‡πâ‡∏≥‡∏™‡∏µ‡πà‡∏†‡∏≤‡∏Ñ', '‡∏ß‡∏±‡∏î‡∏¢‡∏≤‡∏ô‡∏™‡∏±‡∏á‡∏ß‡∏£‡∏≤‡∏£‡∏≤‡∏°‡∏ß‡∏£‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏´‡∏≤‡∏£'],
            '‡∏ä‡∏±‡∏¢‡∏ô‡∏≤‡∏ó': ['‡∏≠‡∏∏‡∏ó‡∏¢‡∏≤‡∏ô‡∏ô‡∏Å‡∏ô‡πâ‡∏≥‡∏ä‡∏±‡∏¢‡∏ô‡∏≤‡∏ó', '‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡∏ö‡∏£‡∏°‡∏ò‡∏≤‡∏ï‡∏∏‡∏ä‡∏±‡∏¢‡∏ô‡∏≤‡∏ó', '‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡πà‡∏≤', '‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞', '‡πÅ‡∏°‡πà‡∏ô‡πâ‡∏≥‡πÄ‡∏à‡πâ‡∏≤‡∏û‡∏£‡∏∞‡∏¢‡∏≤'],
            '‡∏ä‡∏±‡∏¢‡∏†‡∏π‡∏°‡∏¥': ['‡∏õ‡∏£‡∏≤‡∏™‡∏≤‡∏ó‡∏´‡∏¥‡∏ô‡πÄ‡∏ú‡∏≤‡πÑ‡∏ú‡πà', '‡∏≠‡∏∏‡∏ó‡∏¢‡∏≤‡∏ô‡πÅ‡∏´‡πà‡∏á‡∏ä‡∏≤‡∏ï‡∏¥‡∏õ‡πà‡∏≤‡∏´‡∏¥‡∏ô‡∏á‡∏≤‡∏°', '‡∏†‡∏π‡∏•‡∏±‡∏á‡∏Å‡∏≤', '‡∏ß‡∏±‡∏î‡∏ò‡∏≤‡∏ï‡∏∏', '‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡πà‡∏≤‡∏ä‡∏±‡∏¢‡∏†‡∏π‡∏°‡∏¥'],
            '‡∏ä‡∏∏‡∏°‡∏û‡∏£': ['‡∏´‡∏≤‡∏î‡∏ó‡∏∏‡πà‡∏á‡∏ß‡∏±‡∏ß‡πÅ‡∏•', '‡πÄ‡∏Å‡∏≤‡∏∞‡πÄ‡∏ï‡πà‡∏≤', '‡∏≠‡∏∏‡∏ó‡∏¢‡∏≤‡∏ô‡πÅ‡∏´‡πà‡∏á‡∏ä‡∏≤‡∏ï‡∏¥‡∏´‡∏°‡∏π‡πà‡πÄ‡∏Å‡∏≤‡∏∞‡∏ä‡∏∏‡∏°‡∏û‡∏£', '‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡∏ö‡∏£‡∏°‡∏ò‡∏≤‡∏ï‡∏∏', '‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡πà‡∏≤'],
            '‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏¢': ['‡∏ß‡∏±‡∏î‡∏£‡πà‡∏≠‡∏á‡∏Ç‡∏∏‡πà‡∏ô', '‡∏™‡∏≤‡∏°‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥', '‡∏î‡∏≠‡∏¢‡∏ï‡∏∏‡∏á', '‡∏´‡∏≠‡∏ô‡∏≤‡∏¨‡∏¥‡∏Å‡∏≤‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏¢', '‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡πÅ‡∏Å‡πâ‡∏ß'],
            '‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà': ['‡∏™‡∏ß‡∏ô‡∏™‡∏ß‡∏ô‡∏î‡∏≠‡∏Å', '‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà', '‡∏ñ‡∏ô‡∏ô‡∏Ñ‡∏ô‡πÄ‡∏î‡∏¥‡∏ô', '‡∏î‡∏≠‡∏¢‡∏™‡∏∏‡πÄ‡∏ó‡∏û', '‡∏ß‡∏±‡∏î‡πÄ‡∏à‡∏î‡∏µ‡∏¢‡πå‡∏´‡∏•‡∏ß‡∏á'],
            '‡∏ï‡∏£‡∏±‡∏á': ['‡∏´‡∏≤‡∏î‡∏õ‡∏≤‡∏Å‡πÄ‡∏°‡∏á', '‡πÄ‡∏Å‡∏≤‡∏∞‡∏°‡∏∏‡∏Å', '‡∏ñ‡πâ‡∏≥‡πÄ‡∏•‡πÄ‡∏ã', '‡∏≠‡∏∏‡∏ó‡∏¢‡∏≤‡∏ô‡πÅ‡∏´‡πà‡∏á‡∏ä‡∏≤‡∏ï‡∏¥‡∏´‡∏≤‡∏î‡πÄ‡∏à‡πâ‡∏≤‡πÑ‡∏´‡∏°', '‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡πà‡∏≤‡∏ï‡∏£‡∏±‡∏á'],
            '‡∏ï‡∏£‡∏≤‡∏î': ['‡πÄ‡∏Å‡∏≤‡∏∞‡∏ä‡πâ‡∏≤‡∏á', '‡πÄ‡∏Å‡∏≤‡∏∞‡∏Å‡∏π‡∏î', '‡∏´‡∏≤‡∏î‡πÑ‡∏Å‡πà‡πÅ‡∏ö‡πâ', '‡∏≠‡∏∏‡∏ó‡∏¢‡∏≤‡∏ô‡πÅ‡∏´‡πà‡∏á‡∏ä‡∏≤‡∏ï‡∏¥‡∏´‡∏°‡∏π‡πà‡πÄ‡∏Å‡∏≤‡∏∞‡∏ä‡πâ‡∏≤‡∏á', '‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡πà‡∏≤‡∏ï‡∏£‡∏≤‡∏î'],
            '‡∏ï‡∏≤‡∏Å': ['‡∏≠‡∏∏‡∏ó‡∏¢‡∏≤‡∏ô‡πÅ‡∏´‡πà‡∏á‡∏ä‡∏≤‡∏ï‡∏¥‡∏ï‡∏≤‡∏Å‡∏™‡∏¥‡∏ô‡∏°‡∏´‡∏≤‡∏£‡∏≤‡∏ä', '‡∏™‡∏∞‡∏û‡∏≤‡∏ô‡∏°‡∏≠‡∏ç', '‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡∏ö‡∏£‡∏°‡∏ò‡∏≤‡∏ï‡∏∏', '‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡πà‡∏≤', '‡πÅ‡∏°‡πà‡∏ô‡πâ‡∏≥‡∏õ‡∏¥‡∏á'],
            '‡∏ô‡∏Ñ‡∏£‡∏ô‡∏≤‡∏¢‡∏Å': ['‡∏ô‡πâ‡∏≥‡∏ï‡∏Å‡∏ô‡∏≤‡∏á‡∏£‡∏≠‡∏á', '‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡∏û‡∏∏‡∏ó‡∏ò‡∏ö‡∏≤‡∏ó‡∏ï‡∏≤‡∏Å‡∏ú‡πâ‡∏≤', '‡∏™‡∏ß‡∏ô‡∏ú‡∏∂‡πâ‡∏á', '‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡πà‡∏≤', '‡πÅ‡∏°‡πà‡∏ô‡πâ‡∏≥‡∏ô‡∏Ñ‡∏£‡∏ô‡∏≤‡∏¢‡∏Å'],
            '‡∏ô‡∏Ñ‡∏£‡∏õ‡∏ê‡∏°': ['‡∏û‡∏£‡∏∞‡∏õ‡∏ê‡∏°‡πÄ‡∏à‡∏î‡∏µ‡∏¢‡πå', '‡∏™‡∏ß‡∏ô‡∏ú‡∏∂‡πâ‡∏á', '‡∏ï‡∏•‡∏≤‡∏î‡∏î‡∏≠‡∏ô‡∏´‡∏ß‡∏≤‡∏¢', '‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏®‡∏¥‡∏•‡∏õ‡∏Å‡∏£‡∏£‡∏°', '‡∏ß‡∏±‡∏î‡πÑ‡∏£‡πà‡∏Ç‡∏¥‡∏á'],
            '‡∏ô‡∏Ñ‡∏£‡∏û‡∏ô‡∏°': ['‡∏û‡∏£‡∏∞‡∏ò‡∏≤‡∏ï‡∏∏‡∏û‡∏ô‡∏°', '‡πÅ‡∏°‡πà‡∏ô‡πâ‡∏≥‡πÇ‡∏Ç‡∏á', '‡∏ï‡∏•‡∏≤‡∏î‡∏≠‡∏¥‡∏ô‡πÇ‡∏î‡∏à‡∏µ‡∏ô', '‡∏ß‡∏±‡∏î‡∏°‡∏´‡∏≤‡∏ò‡∏≤‡∏ï‡∏∏', '‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞'],
            '‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤': ['‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏™‡∏∏‡∏£‡∏ô‡∏≤‡∏£‡∏µ', '‡πÄ‡∏Ç‡∏≤‡πÉ‡∏´‡∏ç‡πà', '‡∏õ‡∏£‡∏≤‡∏™‡∏≤‡∏ó‡∏´‡∏¥‡∏ô‡∏û‡∏¥‡∏°‡∏≤‡∏¢', '‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞‡∏™‡∏ß‡∏ô‡πÉ‡∏´‡∏°‡πà', '‡∏ñ‡∏ô‡∏ô‡∏¢‡∏∞‡πÇ‡∏°'],
            '‡∏ô‡∏Ñ‡∏£‡∏®‡∏£‡∏µ‡∏ò‡∏£‡∏£‡∏°‡∏£‡∏≤‡∏ä': ['‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡∏°‡∏´‡∏≤‡∏ò‡∏≤‡∏ï‡∏∏', '‡πÄ‡∏Ç‡∏≤‡∏´‡∏•‡∏ß‡∏á', '‡∏´‡∏≤‡∏î‡∏Ñ‡∏µ‡∏£‡∏µ‡∏ß‡∏á', '‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡πà‡∏≤‡∏ô‡∏Ñ‡∏£‡∏®‡∏£‡∏µ‡∏ò‡∏£‡∏£‡∏°‡∏£‡∏≤‡∏ä', '‡∏ñ‡∏ô‡∏ô‡∏£‡∏≤‡∏ä‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô'],
            '‡∏ô‡∏Ñ‡∏£‡∏™‡∏ß‡∏£‡∏£‡∏Ñ‡πå': ['‡∏ö‡∏∂‡∏á‡∏ö‡∏≠‡∏£‡∏∞‡πÄ‡∏û‡πá‡∏î', '‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡∏ö‡∏£‡∏°‡∏ò‡∏≤‡∏ï‡∏∏', '‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡πà‡∏≤', '‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞', '‡πÅ‡∏°‡πà‡∏ô‡πâ‡∏≥‡∏ô‡πà‡∏≤‡∏ô'],
            '‡∏ô‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ': ['‡πÄ‡∏Å‡∏≤‡∏∞‡πÄ‡∏Å‡∏£‡πá‡∏î', '‡∏ß‡∏±‡∏î‡∏ä‡∏•‡∏õ‡∏£‡∏∞‡∏ó‡∏≤‡∏ô‡∏£‡∏±‡∏á‡∏™‡∏§‡∏©‡∏î‡∏¥‡πå', '‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞‡∏ô‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ', '‡∏ñ‡∏ô‡∏ô‡∏ï‡∏¥‡∏ß‡∏≤‡∏ô‡∏ô‡∏ó‡πå', '‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡πà‡∏≤'],
            '‡∏ô‡∏£‡∏≤‡∏ò‡∏¥‡∏ß‡∏≤‡∏™': ['‡∏´‡∏≤‡∏î‡∏ô‡∏£‡∏≤‡∏ò‡∏¥‡∏ß‡∏≤‡∏™', '‡∏ß‡∏±‡∏î‡πÄ‡∏Ç‡∏≤‡∏Ñ‡∏á', '‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡πà‡∏≤', '‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞', '‡∏ñ‡∏ô‡∏ô‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï-‡∏ô‡∏£‡∏≤‡∏ò‡∏¥‡∏ß‡∏≤‡∏™'],
            '‡∏ô‡πà‡∏≤‡∏ô': ['‡∏ß‡∏±‡∏î‡∏†‡∏π‡∏°‡∏¥‡∏ô‡∏ó‡∏£‡πå', '‡πÅ‡∏°‡πà‡∏ô‡πâ‡∏≥‡∏ô‡πà‡∏≤‡∏ô', '‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡πà‡∏≤', '‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞', '‡∏ñ‡∏ô‡∏ô‡∏™‡∏∏‡∏°‡∏ô‡πÄ‡∏ó‡∏ß‡∏£‡∏≤‡∏ä'],
            '‡∏ö‡∏∂‡∏á‡∏Å‡∏≤‡∏¨': ['‡∏´‡∏ô‡∏≠‡∏á‡∏´‡∏≤‡∏ô', '‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡∏ò‡∏≤‡∏ï‡∏∏', '‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡πà‡∏≤', '‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞', '‡πÅ‡∏°‡πà‡∏ô‡πâ‡∏≥‡πÇ‡∏Ç‡∏á'],
            '‡∏ö‡∏∏‡∏£‡∏µ‡∏£‡∏±‡∏°‡∏¢‡πå': ['‡∏õ‡∏£‡∏≤‡∏™‡∏≤‡∏ó‡πÄ‡∏Ç‡∏≤‡∏û‡∏ô‡∏°‡∏£‡∏∏‡πâ‡∏á', '‡∏™‡∏ô‡∏≤‡∏°‡∏ä‡πâ‡∏≤‡∏á‡∏≠‡∏≤‡∏£‡∏µ‡∏ô‡∏≤', '‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡∏ò‡∏≤‡∏ï‡∏∏', '‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡πà‡∏≤', '‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞'],
            '‡∏õ‡∏ó‡∏∏‡∏°‡∏ò‡∏≤‡∏ô‡∏µ': ['‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏ò‡∏£‡∏£‡∏°‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå', '‡∏ï‡∏•‡∏≤‡∏î‡∏ô‡πâ‡∏≥‡∏Ñ‡∏•‡∏≠‡∏á‡∏•‡∏≤‡∏î‡∏°‡∏∞‡∏¢‡∏°', '‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞‡∏õ‡∏ó‡∏∏‡∏°‡∏ò‡∏≤‡∏ô‡∏µ', '‡∏ñ‡∏ô‡∏ô‡∏£‡∏±‡∏á‡∏™‡∏¥‡∏ï-‡∏ô‡∏Ñ‡∏£‡∏ô‡∏≤‡∏¢‡∏Å', '‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡∏ò‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏¢'],
            '‡∏õ‡∏£‡∏∞‡∏à‡∏ß‡∏ö‡∏Ñ‡∏µ‡∏£‡∏µ‡∏Ç‡∏±‡∏ô‡∏ò‡πå': ['‡∏´‡∏≤‡∏î‡∏´‡∏±‡∏ß‡∏´‡∏¥‡∏ô', '‡πÄ‡∏Ç‡∏≤‡∏™‡∏≤‡∏°‡∏£‡πâ‡∏≠‡∏¢‡∏¢‡∏≠‡∏î', '‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡∏ò‡∏≤‡∏ï‡∏∏', '‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡πà‡∏≤', '‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞'],
            '‡∏õ‡∏£‡∏≤‡∏à‡∏µ‡∏ô‡∏ö‡∏∏‡∏£‡∏µ': ['‡∏ß‡∏±‡∏î‡πÑ‡∏ú‡πà‡πÇ‡∏£‡∏á‡∏ß‡∏±‡∏ß', '‡πÄ‡∏Ç‡∏≤‡πÉ‡∏´‡∏ç‡πà', '‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡πà‡∏≤', '‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞', '‡πÅ‡∏°‡πà‡∏ô‡πâ‡∏≥‡∏ö‡∏≤‡∏á‡∏õ‡∏∞‡∏Å‡∏á'],
            '‡∏õ‡∏±‡∏ï‡∏ï‡∏≤‡∏ô‡∏µ': ['‡∏°‡∏±‡∏™‡∏¢‡∏¥‡∏î‡∏Å‡∏£‡∏∑‡∏≠‡πÄ‡∏ã‡∏∞', '‡∏´‡∏≤‡∏î‡∏õ‡∏±‡∏ï‡∏ï‡∏≤‡∏ô‡∏µ', '‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡πà‡∏≤', '‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞', '‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡∏ò‡∏≤‡∏ï‡∏∏'],
            '‡∏û‡∏£‡∏∞‡∏ô‡∏Ñ‡∏£‡∏®‡∏£‡∏µ‡∏≠‡∏¢‡∏∏‡∏ò‡∏¢‡∏≤': ['‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡∏®‡∏£‡∏µ‡∏™‡∏£‡∏£‡πÄ‡∏û‡∏ä‡∏ç‡πå', '‡∏ß‡∏±‡∏î‡∏°‡∏´‡∏≤‡∏ò‡∏≤‡∏ï‡∏∏', '‡∏ï‡∏•‡∏≤‡∏î‡∏ô‡πâ‡∏≥‡∏≠‡∏¢‡∏∏‡∏ò‡∏¢‡∏≤', '‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞', '‡πÅ‡∏°‡πà‡∏ô‡πâ‡∏≥‡πÄ‡∏à‡πâ‡∏≤‡∏û‡∏£‡∏∞‡∏¢‡∏≤'],
            '‡∏û‡∏±‡∏á‡∏á‡∏≤': ['‡∏≠‡πà‡∏≤‡∏ß‡∏û‡∏±‡∏á‡∏á‡∏≤', '‡πÄ‡∏Å‡∏≤‡∏∞‡πÄ‡∏à‡∏°‡∏™‡πå‡∏ö‡∏≠‡∏ô‡∏î‡πå', '‡∏ñ‡πâ‡∏≥‡∏û‡∏∏‡∏á‡∏ä‡πâ‡∏≤‡∏á', '‡∏´‡∏≤‡∏î‡∏ô‡∏≤‡∏á‡∏ó‡∏≠‡∏á', '‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡πà‡∏≤'],
            '‡∏û‡∏±‡∏ó‡∏•‡∏∏‡∏á': ['‡∏ó‡∏∞‡πÄ‡∏•‡∏™‡∏≤‡∏ö‡∏™‡∏á‡∏Ç‡∏•‡∏≤', '‡πÄ‡∏Ç‡∏≤‡∏≠‡∏Å', '‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡∏ò‡∏≤‡∏ï‡∏∏', '‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡πà‡∏≤', '‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞'],
            '‡∏û‡∏¥‡∏à‡∏¥‡∏ï‡∏£': ['‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡∏®‡∏£‡∏µ‡∏£‡∏±‡∏ï‡∏ô‡∏°‡∏´‡∏≤‡∏ò‡∏≤‡∏ï‡∏∏', '‡∏ö‡∏∂‡∏á‡∏™‡∏µ‡πÑ‡∏ü', '‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡πà‡∏≤', '‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞', '‡πÅ‡∏°‡πà‡∏ô‡πâ‡∏≥‡∏ô‡πà‡∏≤‡∏ô'],
            '‡∏û‡∏¥‡∏©‡∏ì‡∏∏‡πÇ‡∏•‡∏Å': ['‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡∏®‡∏£‡∏µ‡∏£‡∏±‡∏ï‡∏ô‡∏°‡∏´‡∏≤‡∏ò‡∏≤‡∏ï‡∏∏', '‡∏≠‡∏∏‡∏ó‡∏¢‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡∏™‡∏∏‡πÇ‡∏Ç‡∏ó‡∏±‡∏¢', '‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡πà‡∏≤', '‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞', '‡πÅ‡∏°‡πà‡∏ô‡πâ‡∏≥‡∏ô‡πà‡∏≤‡∏ô'],
            '‡πÄ‡∏û‡∏ä‡∏£‡∏ö‡∏∏‡∏£‡∏µ': ['‡∏û‡∏£‡∏∞‡∏ô‡∏Ñ‡∏£‡∏Ñ‡∏µ‡∏£‡∏µ', '‡∏´‡∏≤‡∏î‡∏ä‡∏∞‡∏≠‡∏≥', '‡∏ß‡∏±‡∏î‡πÑ‡∏ú‡πà‡∏£‡πà‡∏≠‡∏á‡∏ß‡∏±‡∏ß', '‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡πà‡∏≤', '‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞'],
            '‡πÄ‡∏û‡∏ä‡∏£‡∏ö‡∏π‡∏£‡∏ì‡πå': ['‡πÄ‡∏Ç‡∏≤‡∏Ñ‡πâ‡∏≠', '‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏õ‡πà‡∏≤‡πÑ‡∏ú‡πà', '‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡∏ò‡∏≤‡∏ï‡∏∏', '‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡πà‡∏≤', '‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞'],
            '‡πÅ‡∏û‡∏£‡πà': ['‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡∏ò‡∏≤‡∏ï‡∏∏‡∏ä‡πà‡∏≠‡πÅ‡∏Æ', '‡πÅ‡∏°‡πà‡∏ô‡πâ‡∏≥‡∏¢‡∏°', '‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡πà‡∏≤', '‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞', '‡∏ñ‡∏ô‡∏ô‡πÄ‡∏à‡∏£‡∏¥‡∏ç‡πÄ‡∏°‡∏∑‡∏≠‡∏á'],
            '‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï': ['‡∏´‡∏≤‡∏î‡∏õ‡πà‡∏≤‡∏ï‡∏≠‡∏á', '‡∏´‡∏≤‡∏î‡∏Å‡∏∞‡∏ï‡∏∞', '‡∏´‡∏≤‡∏î‡∏Å‡∏∞‡∏£‡∏ô', '‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡πÄ‡∏Å‡πà‡∏≤‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï', '‡∏ß‡∏±‡∏î‡∏â‡∏•‡∏≠‡∏á'],
            '‡∏°‡∏´‡∏≤‡∏™‡∏≤‡∏£‡∏Ñ‡∏≤‡∏°': ['‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏°‡∏´‡∏≤‡∏™‡∏≤‡∏£‡∏Ñ‡∏≤‡∏°', '‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡∏ò‡∏≤‡∏ï‡∏∏‡∏ô‡∏≤‡∏î‡∏π‡∏ô', '‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡πà‡∏≤', '‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞', '‡∏ö‡∏∂‡∏á‡∏û‡∏•‡∏≤‡∏ç‡∏ä‡∏±‡∏¢'],
            '‡∏°‡∏∏‡∏Å‡∏î‡∏≤‡∏´‡∏≤‡∏£': ['‡∏´‡∏¥‡∏ô‡∏™‡∏≤‡∏°‡∏û‡∏±‡∏ô', '‡πÅ‡∏°‡πà‡∏ô‡πâ‡∏≥‡πÇ‡∏Ç‡∏á', '‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡∏ò‡∏≤‡∏ï‡∏∏', '‡∏ï‡∏•‡∏≤‡∏î‡∏≠‡∏¥‡∏ô‡πÇ‡∏î‡∏à‡∏µ‡∏ô', '‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞'],
            '‡πÅ‡∏°‡πà‡∏Æ‡πà‡∏≠‡∏á‡∏™‡∏≠‡∏ô': ['‡∏õ‡∏≤‡∏á‡∏≠‡∏∏‡πã‡∏á', '‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡∏ò‡∏≤‡∏ï‡∏∏‡∏î‡∏≠‡∏¢‡∏Å‡∏≠‡∏á‡∏°‡∏π', '‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡πà‡∏≤', '‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞', '‡∏ñ‡∏ô‡∏ô‡∏Ñ‡∏ô‡πÄ‡∏î‡∏¥‡∏ô'],
            '‡∏¢‡πÇ‡∏ã‡∏ò‡∏£': ['‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡∏ò‡∏≤‡∏ï‡∏∏‡∏≠‡∏≤‡∏ô‡∏±‡∏ô‡∏ó‡πå', '‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏ô‡πâ‡∏≥', '‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡πà‡∏≤', '‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞', '‡πÅ‡∏°‡πà‡∏ô‡πâ‡∏≥‡∏ä‡∏µ'],
            '‡∏¢‡∏∞‡∏•‡∏≤': ['‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡∏ò‡∏≤‡∏ï‡∏∏‡πÄ‡∏à‡∏î‡∏µ‡∏¢‡πå', '‡∏´‡∏≤‡∏î‡∏¢‡∏∞‡∏•‡∏≤', '‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡πà‡∏≤', '‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞', '‡∏ñ‡∏ô‡∏ô‡∏™‡∏¥‡∏£‡∏¥‡∏ô‡∏ò‡∏£'],
            '‡∏£‡πâ‡∏≠‡∏¢‡πÄ‡∏≠‡πá‡∏î': ['‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡∏°‡∏´‡∏≤‡∏ò‡∏≤‡∏ï‡∏∏', '‡∏ö‡∏∂‡∏á‡∏û‡∏•‡∏≤‡∏ç‡∏ä‡∏±‡∏¢', '‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡πà‡∏≤', '‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞', '‡∏ñ‡∏ô‡∏ô‡πÄ‡∏û‡∏ä‡∏£‡πÄ‡∏Å‡∏©‡∏°'],
            '‡∏£‡∏∞‡∏ô‡∏≠‡∏á': ['‡∏ô‡πâ‡∏≥‡∏û‡∏∏‡∏£‡πâ‡∏≠‡∏ô‡∏£‡∏∞‡∏ô‡∏≠‡∏á', '‡πÄ‡∏Å‡∏≤‡∏∞‡∏ä‡πâ‡∏≤‡∏á', '‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡∏ò‡∏≤‡∏ï‡∏∏', '‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡πà‡∏≤', '‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞'],
            '‡∏£‡∏∞‡∏¢‡∏≠‡∏á': ['‡∏´‡∏≤‡∏î‡πÅ‡∏°‡πà‡∏£‡∏≥‡∏û‡∏∂‡∏á', '‡πÄ‡∏Å‡∏≤‡∏∞‡πÄ‡∏™‡∏°‡πá‡∏î', '‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞‡∏£‡∏∞‡∏¢‡∏≠‡∏á', '‡∏ñ‡∏ô‡∏ô‡∏™‡∏∏‡∏Ç‡∏∏‡∏°‡∏ß‡∏¥‡∏ó', '‡∏ß‡∏±‡∏î‡∏õ‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏î‡∏π‡πà'],
            '‡∏£‡∏≤‡∏ä‡∏ö‡∏∏‡∏£‡∏µ': ['‡∏ï‡∏•‡∏≤‡∏î‡∏ô‡πâ‡∏≥‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏™‡∏∞‡∏î‡∏ß‡∏Å', '‡πÄ‡∏Ç‡∏≤‡∏ö‡∏¥‡∏ô', '‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡∏ò‡∏≤‡∏ï‡∏∏', '‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡πà‡∏≤', '‡πÅ‡∏°‡πà‡∏ô‡πâ‡∏≥‡πÅ‡∏°‡πà‡∏Å‡∏•‡∏≠‡∏á'],
            '‡∏•‡∏û‡∏ö‡∏∏‡∏£‡∏µ': ['‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡∏®‡∏£‡∏µ‡∏£‡∏±‡∏ï‡∏ô‡∏°‡∏´‡∏≤‡∏ò‡∏≤‡∏ï‡∏∏', '‡∏õ‡∏£‡∏≤‡∏™‡∏≤‡∏ó‡∏ô‡∏≤‡∏£‡∏≤‡∏¢‡∏ì‡πå‡∏£‡∏≤‡∏ä‡∏ô‡∏¥‡πÄ‡∏ß‡∏®‡∏ô‡πå', '‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡πà‡∏≤', '‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞', '‡∏ñ‡∏ô‡∏ô‡∏ô‡∏≤‡πÑ‡∏ú‡πà'],
            '‡∏•‡∏≥‡∏õ‡∏≤‡∏á': ['‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡∏ò‡∏≤‡∏ï‡∏∏‡∏•‡∏≥‡∏õ‡∏≤‡∏á‡∏´‡∏•‡∏ß‡∏á', '‡∏ï‡∏•‡∏≤‡∏î‡∏Å‡∏≤‡∏î‡∏Å‡∏≠‡∏á‡∏ï‡πâ‡∏≤', '‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞', '‡∏ñ‡∏ô‡∏ô‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡πâ‡∏≤', '‡πÅ‡∏°‡πà‡∏ô‡πâ‡∏≥‡∏ß‡∏±‡∏á'],
            '‡∏•‡∏≥‡∏û‡∏π‡∏ô': ['‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡∏ò‡∏≤‡∏ï‡∏∏‡∏´‡∏£‡∏¥‡∏†‡∏∏‡∏ç‡∏ä‡∏±‡∏¢', '‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡πà‡∏≤', '‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞', '‡∏ñ‡∏ô‡∏ô‡∏≠‡∏¥‡∏ô‡∏ó‡∏ß‡πÇ‡∏£‡∏£‡∏™', '‡πÅ‡∏°‡πà‡∏ô‡πâ‡∏≥‡∏Å‡∏ß‡∏á'],
            '‡πÄ‡∏•‡∏¢': ['‡∏†‡∏π‡∏Å‡∏£‡∏∞‡∏î‡∏∂‡∏á', '‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡∏ò‡∏≤‡∏ï‡∏∏', '‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡πà‡∏≤', '‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞', '‡πÅ‡∏°‡πà‡∏ô‡πâ‡∏≥‡πÇ‡∏Ç‡∏á'],
            '‡∏®‡∏£‡∏µ‡∏™‡∏∞‡πÄ‡∏Å‡∏©': ['‡∏õ‡∏£‡∏≤‡∏™‡∏≤‡∏ó‡∏™‡∏£‡∏∞‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡πÉ‡∏´‡∏ç‡πà', '‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡∏ò‡∏≤‡∏ï‡∏∏', '‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡πà‡∏≤', '‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞', '‡πÅ‡∏°‡πà‡∏ô‡πâ‡∏≥‡∏°‡∏π‡∏•'],
            '‡∏™‡∏Å‡∏•‡∏ô‡∏Ñ‡∏£': ['‡∏û‡∏£‡∏∞‡∏ò‡∏≤‡∏ï‡∏∏‡πÄ‡∏ä‡∏¥‡∏á‡∏ä‡∏∏‡∏°', '‡∏´‡∏ô‡∏≠‡∏á‡∏´‡∏≤‡∏ô', '‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡πà‡∏≤', '‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞', '‡πÅ‡∏°‡πà‡∏ô‡πâ‡∏≥‡πÇ‡∏Ç‡∏á'],
            '‡∏™‡∏á‡∏Ç‡∏•‡∏≤': ['‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏™‡∏á‡∏Ç‡∏•‡∏≤‡∏ô‡∏Ñ‡∏£‡∏¥‡∏ô‡∏ó‡∏£‡πå', '‡∏´‡∏≤‡∏î‡∏™‡∏°‡∏¥‡∏´‡∏•‡∏≤', '‡∏ó‡∏∞‡πÄ‡∏•‡∏™‡∏≤‡∏ö‡∏™‡∏á‡∏Ç‡∏•‡∏≤', '‡πÄ‡∏Å‡∏≤‡∏∞‡∏¢‡∏≠', '‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡πà‡∏≤'],
            '‡∏™‡∏ï‡∏π‡∏•': ['‡πÄ‡∏Å‡∏≤‡∏∞‡∏ï‡∏∞‡∏£‡∏∏‡πÄ‡∏ï‡∏≤', '‡πÄ‡∏Å‡∏≤‡∏∞‡∏≠‡∏≤‡∏î‡∏±‡∏á', '‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡∏ò‡∏≤‡∏ï‡∏∏', '‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡πà‡∏≤', '‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞'],
            '‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏õ‡∏£‡∏≤‡∏Å‡∏≤‡∏£': ['‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡πÇ‡∏ö‡∏£‡∏≤‡∏ì', '‡∏ß‡∏±‡∏î‡∏≠‡πÇ‡∏®‡∏Å‡∏≤‡∏£‡∏≤‡∏°', '‡∏ï‡∏•‡∏≤‡∏î‡∏ô‡πâ‡∏≥‡∏ö‡∏≤‡∏á‡∏ô‡πâ‡∏≥‡∏ú‡∏∂‡πâ‡∏á', '‡∏™‡∏ô‡∏≤‡∏°‡∏ö‡∏¥‡∏ô‡∏™‡∏∏‡∏ß‡∏£‡∏£‡∏ì‡∏†‡∏π‡∏°‡∏¥', '‡∏ß‡∏±‡∏î‡∏ö‡∏≤‡∏á‡∏û‡∏•‡∏µ'],
            '‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏™‡∏á‡∏Ñ‡∏£‡∏≤‡∏°': ['‡∏ï‡∏•‡∏≤‡∏î‡∏ô‡πâ‡∏≥‡∏≠‡∏±‡∏°‡∏û‡∏ß‡∏≤', '‡∏ß‡∏±‡∏î‡∏ö‡∏≤‡∏á‡∏Å‡∏∏‡πâ‡∏á', '‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞', '‡∏ñ‡∏ô‡∏ô‡πÄ‡∏û‡∏ä‡∏£‡πÄ‡∏Å‡∏©‡∏°', '‡πÅ‡∏°‡πà‡∏ô‡πâ‡∏≥‡πÅ‡∏°‡πà‡∏Å‡∏•‡∏≠‡∏á'],
            '‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏™‡∏≤‡∏Ñ‡∏£': ['‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡∏™‡∏°‡∏∏‡∏ó‡∏£‡πÄ‡∏à‡∏î‡∏µ‡∏¢‡πå', '‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡πà‡∏≤', '‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞', '‡∏ñ‡∏ô‡∏ô‡πÄ‡∏û‡∏ä‡∏£‡πÄ‡∏Å‡∏©‡∏°', '‡πÅ‡∏°‡πà‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏≤‡∏à‡∏µ‡∏ô'],
            '‡∏™‡∏£‡∏∞‡πÅ‡∏Å‡πâ‡∏ß': ['‡∏≠‡∏£‡∏±‡∏ç‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®', '‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡∏ò‡∏≤‡∏ï‡∏∏', '‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡πà‡∏≤', '‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞', '‡∏ñ‡∏ô‡∏ô‡∏™‡∏∏‡∏ß‡∏£‡∏£‡∏ì‡∏®‡∏£'],
            '‡∏™‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏µ': ['‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡∏û‡∏∏‡∏ó‡∏ò‡∏ö‡∏≤‡∏ó‡∏£‡∏≤‡∏ä‡∏ß‡∏£‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏´‡∏≤‡∏£', '‡πÄ‡∏Ç‡∏≤‡∏™‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏ô', '‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡πà‡∏≤', '‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞', '‡∏ñ‡∏ô‡∏ô‡∏°‡∏¥‡∏ï‡∏£‡∏†‡∏≤‡∏û'],
            '‡∏™‡∏¥‡∏á‡∏´‡πå‡∏ö‡∏∏‡∏£‡∏µ': ['‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡∏®‡∏£‡∏µ‡∏£‡∏±‡∏ï‡∏ô‡∏°‡∏´‡∏≤‡∏ò‡∏≤‡∏ï‡∏∏', '‡πÅ‡∏°‡πà‡∏ô‡πâ‡∏≥‡πÄ‡∏à‡πâ‡∏≤‡∏û‡∏£‡∏∞‡∏¢‡∏≤', '‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡πà‡∏≤', '‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞', '‡∏ñ‡∏ô‡∏ô‡∏ö‡∏≤‡∏á‡∏õ‡∏∞‡∏´‡∏±‡∏ô'],
            '‡∏™‡∏∏‡πÇ‡∏Ç‡∏ó‡∏±‡∏¢': ['‡∏≠‡∏∏‡∏ó‡∏¢‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡∏™‡∏∏‡πÇ‡∏Ç‡∏ó‡∏±‡∏¢', '‡∏ß‡∏±‡∏î‡∏°‡∏´‡∏≤‡∏ò‡∏≤‡∏ï‡∏∏', '‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡πà‡∏≤', '‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞', '‡πÅ‡∏°‡πà‡∏ô‡πâ‡∏≥‡∏¢‡∏°'],
            '‡∏™‡∏∏‡∏û‡∏£‡∏£‡∏ì‡∏ö‡∏∏‡∏£‡∏µ': ['‡∏´‡∏≠‡∏û‡∏£‡∏∞‡∏≠‡∏¥‡∏®‡∏ß‡∏£‡πÄ‡∏ó‡∏û', '‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡∏®‡∏£‡∏µ‡∏£‡∏±‡∏ï‡∏ô‡∏°‡∏´‡∏≤‡∏ò‡∏≤‡∏ï‡∏∏', '‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡πà‡∏≤', '‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞', '‡πÅ‡∏°‡πà‡∏ô‡πâ‡∏≥‡∏ó‡πà‡∏≤‡∏à‡∏µ‡∏ô'],
            '‡∏™‡∏∏‡∏£‡∏≤‡∏©‡∏é‡∏£‡πå‡∏ò‡∏≤‡∏ô‡∏µ': ['‡πÄ‡∏Å‡∏≤‡∏∞‡∏™‡∏°‡∏∏‡∏¢', '‡πÄ‡∏Å‡∏≤‡∏∞‡∏û‡∏∞‡∏á‡∏±‡∏ô', '‡πÄ‡∏Å‡∏≤‡∏∞‡πÄ‡∏ï‡πà‡∏≤', '‡∏≠‡∏∏‡∏ó‡∏¢‡∏≤‡∏ô‡πÅ‡∏´‡πà‡∏á‡∏ä‡∏≤‡∏ï‡∏¥‡πÄ‡∏Ç‡∏≤‡∏™‡∏Å', '‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡πà‡∏≤'],
            '‡∏™‡∏∏‡∏£‡∏¥‡∏ô‡∏ó‡∏£‡πå': ['‡∏õ‡∏£‡∏≤‡∏™‡∏≤‡∏ó‡∏ï‡∏≤‡πÄ‡∏°‡∏∑‡∏≠‡∏ô', '‡∏á‡∏≤‡∏ô‡∏ä‡πâ‡∏≤‡∏á‡∏™‡∏∏‡∏£‡∏¥‡∏ô‡∏ó‡∏£‡πå', '‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡∏ò‡∏≤‡∏ï‡∏∏', '‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡πà‡∏≤', '‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞'],
            '‡∏´‡∏ô‡∏≠‡∏á‡∏Ñ‡∏≤‡∏¢': ['‡∏®‡∏≤‡∏•‡∏≤‡πÅ‡∏Å‡πâ‡∏ß‡∏Å‡∏π‡πà', '‡πÅ‡∏°‡πà‡∏ô‡πâ‡∏≥‡πÇ‡∏Ç‡∏á', '‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡∏ò‡∏≤‡∏ï‡∏∏', '‡∏ï‡∏•‡∏≤‡∏î‡∏≠‡∏¥‡∏ô‡πÇ‡∏î‡∏à‡∏µ‡∏ô', '‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞'],
            '‡∏´‡∏ô‡∏≠‡∏á‡∏ö‡∏±‡∏ß‡∏•‡∏≥‡∏†‡∏π': ['‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡∏ò‡∏≤‡∏ï‡∏∏', '‡πÄ‡∏Ç‡∏≤‡∏Ñ‡πâ‡∏≠', '‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡πà‡∏≤', '‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞', '‡πÅ‡∏°‡πà‡∏ô‡πâ‡∏≥‡πÇ‡∏Ç‡∏á'],
            '‡∏≠‡πà‡∏≤‡∏á‡∏ó‡∏≠‡∏á': ['‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡∏®‡∏£‡∏µ‡∏£‡∏±‡∏ï‡∏ô‡∏°‡∏´‡∏≤‡∏ò‡∏≤‡∏ï‡∏∏', '‡πÅ‡∏°‡πà‡∏ô‡πâ‡∏≥‡πÄ‡∏à‡πâ‡∏≤‡∏û‡∏£‡∏∞‡∏¢‡∏≤', '‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡πà‡∏≤', '‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞', '‡∏ñ‡∏ô‡∏ô‡∏ö‡∏≤‡∏á‡∏õ‡∏∞‡∏≠‡∏¥‡∏ô'],
            '‡∏≠‡∏≥‡∏ô‡∏≤‡∏à‡πÄ‡∏à‡∏£‡∏¥‡∏ç': ['‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡∏ò‡∏≤‡∏ï‡∏∏', '‡πÅ‡∏°‡πà‡∏ô‡πâ‡∏≥‡πÇ‡∏Ç‡∏á', '‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡πà‡∏≤', '‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞', '‡∏ñ‡∏ô‡∏ô‡∏°‡∏¥‡∏ï‡∏£‡∏†‡∏≤‡∏û'],
            '‡∏≠‡∏∏‡∏î‡∏£‡∏ò‡∏≤‡∏ô‡∏µ': ['‡∏´‡∏ô‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏à‡∏±‡∏Å‡∏©‡πå', '‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏ä‡∏µ‡∏¢‡∏á', '‡∏†‡∏π‡∏û‡∏£‡∏∞‡∏ö‡∏≤‡∏ó', '‡∏ï‡∏•‡∏≤‡∏î‡∏Å‡∏•‡∏≤‡∏á‡πÄ‡∏ß‡∏µ‡∏¢‡∏á', '‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏≠‡∏∏‡∏î‡∏£‡∏ò‡∏≤‡∏ô‡∏µ'],
            '‡∏≠‡∏∏‡∏ï‡∏£‡∏î‡∏¥‡∏ï‡∏ñ‡πå': ['‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡∏ö‡∏£‡∏°‡∏ò‡∏≤‡∏ï‡∏∏', '‡πÅ‡∏°‡πà‡∏ô‡πâ‡∏≥‡∏ô‡πà‡∏≤‡∏ô', '‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡πà‡∏≤', '‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞', '‡∏ñ‡∏ô‡∏ô‡∏ó‡πà‡∏≤‡∏≠‡∏¥‡∏ê'],
            '‡∏≠‡∏∏‡∏ó‡∏±‡∏¢‡∏ò‡∏≤‡∏ô‡∏µ': ['‡∏ß‡∏±‡∏î‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏™‡∏£‡∏±‡∏ï‡∏ô‡∏Ñ‡∏µ‡∏£‡∏µ', '‡∏´‡∏∏‡∏ö‡∏Å‡∏∞‡∏û‡∏á', '‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡πà‡∏≤', '‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞', '‡πÅ‡∏°‡πà‡∏ô‡πâ‡∏≥‡∏™‡∏∞‡πÅ‡∏Å‡∏Å‡∏£‡∏±‡∏á'],
            '‡∏≠‡∏∏‡∏ö‡∏•‡∏£‡∏≤‡∏ä‡∏ò‡∏≤‡∏ô‡∏µ': ['‡∏ß‡∏±‡∏î‡∏û‡∏£‡∏∞‡∏ò‡∏≤‡∏ï‡∏∏‡∏ô‡∏á‡∏ö‡∏±‡∏ß', '‡πÅ‡∏°‡πà‡∏ô‡πâ‡∏≥‡πÇ‡∏Ç‡∏á', '‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡πà‡∏≤', '‡∏™‡∏ß‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞', '‡∏ñ‡∏ô‡∏ô‡∏≠‡∏∏‡∏õ‡∏£‡∏≤‡∏ä']
        };

        // Initialize
        document.addEventListener('DOMContentLoaded', function() {
            setupEventListeners();
            setupAutocomplete();
            updateLanguage();
            
            // Add demo user
            if (!users['demo']) {
                users['demo'] = { password: '1234', province: '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£' };
                localStorage.setItem('fitTrackerUsers', JSON.stringify(users));
            }
            
            // Add sample data if empty
            if (runningData.length === 0) {
                addSampleData();
            }
        });

        function updateLanguage() {
            document.getElementById('languageSelector').value = currentLanguage;
            const t = translations[currentLanguage];
            
            // Update login screen
            document.getElementById('appTitle').textContent = t.appTitle;
            document.getElementById('appSubtitle').textContent = t.appSubtitle;
            
            // Update form labels and buttons
            document.querySelectorAll('[data-translate]').forEach(element => {
                const key = element.getAttribute('data-translate');
                if (t[key]) {
                    if (element.tagName === 'INPUT' && element.type === 'submit') {
                        element.value = t[key];
                    } else if (element.tagName === 'BUTTON') {
                        element.textContent = t[key];
                    } else if (element.tagName === 'OPTION') {
                        element.textContent = t[key];
                    } else {
                        element.textContent = t[key];
                    }
                }
            });
        }

        function setupEventListeners() {
            // Language selector
            document.getElementById('languageSelector').addEventListener('change', function() {
                currentLanguage = this.value;
                localStorage.setItem('fitTrackerLanguage', currentLanguage);
                updateLanguage();
            });

            // Login and Register
            document.getElementById('loginForm').addEventListener('submit', handleLogin);
            document.getElementById('registerForm').addEventListener('submit', handleRegister);
            document.getElementById('logoutBtn').addEventListener('click', handleLogout);

            // Navigation
            document.getElementById('runningTab').addEventListener('click', () => showSection('running'));
            document.getElementById('gymTab').addEventListener('click', () => showSection('gym'));
            document.getElementById('statsTab').addEventListener('click', () => showSection('stats'));
            document.getElementById('leaderboardTab').addEventListener('click', () => showSection('leaderboard'));

            // Forms
            document.getElementById('runningForm').addEventListener('submit', handleRunningCalculation);
            document.getElementById('gymForm').addEventListener('submit', handleGymCalculation);

            // Leaderboard filter
            document.getElementById('leaderboardFilter').addEventListener('change', updateLeaderboard);
        }

        function setupAutocomplete() {
            const provinceInput = document.getElementById('provinceInput');
            const provinceDropdown = document.getElementById('provinceDropdown');
            const locationInput = document.getElementById('locationInput');
            const locationDropdown = document.getElementById('locationDropdown');
            
            let selectedProvinceIndex = -1;
            let selectedLocationIndex = -1;

            // Province autocomplete
            provinceInput.addEventListener('input', function() {
                const value = this.value.toLowerCase();
                const provinces = Object.keys(provinceData).filter(province => 
                    province.toLowerCase().includes(value)
                );
                
                if (value && provinces.length > 0) {
                    provinceDropdown.innerHTML = '';
                    provinces.forEach((province, index) => {
                        const item = document.createElement('div');
                        item.className = 'autocomplete-item';
                        item.textContent = province;
                        item.addEventListener('click', () => selectProvince(province));
                        provinceDropdown.appendChild(item);
                    });
                    provinceDropdown.classList.remove('hidden');
                    selectedProvinceIndex = -1;
                } else {
                    provinceDropdown.classList.add('hidden');
                }
            });

            provinceInput.addEventListener('keydown', function(e) {
                const items = provinceDropdown.querySelectorAll('.autocomplete-item');
                
                if (e.key === 'ArrowDown') {
                    e.preventDefault();
                    selectedProvinceIndex = Math.min(selectedProvinceIndex + 1, items.length - 1);
                    updateSelection(items, selectedProvinceIndex);
                } else if (e.key === 'ArrowUp') {
                    e.preventDefault();
                    selectedProvinceIndex = Math.max(selectedProvinceIndex - 1, -1);
                    updateSelection(items, selectedProvinceIndex);
                } else if (e.key === 'Enter' && selectedProvinceIndex >= 0) {
                    e.preventDefault();
                    items[selectedProvinceIndex].click();
                } else if (e.key === 'Escape') {
                    provinceDropdown.classList.add('hidden');
                }
            });

            // Location autocomplete
            locationInput.addEventListener('input', function() {
                const selectedProvince = document.getElementById('selectedProvince').value;
                if (!selectedProvince) return;
                
                const value = this.value.toLowerCase();
                
                // Combine default locations with custom locations
                const defaultLocations = provinceData[selectedProvince] || [];
                const customLocs = customLocations[selectedProvince] || [];
                const allLocations = [...defaultLocations, ...customLocs];
                
                const filteredLocations = allLocations.filter(location => 
                    location.toLowerCase().includes(value)
                );
                
                if (value && filteredLocations.length > 0) {
                    locationDropdown.innerHTML = '';
                    filteredLocations.forEach((location, index) => {
                        const item = document.createElement('div');
                        const isCustom = customLocs.includes(location);
                        item.className = isCustom ? 'autocomplete-item custom-location' : 'autocomplete-item';
                        item.textContent = location;
                        if (isCustom) {
                            item.title = '‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏≠‡∏á';
                        }
                        item.addEventListener('click', () => selectLocation(location));
                        locationDropdown.appendChild(item);
                    });
                    locationDropdown.classList.remove('hidden');
                    selectedLocationIndex = -1;
                } else {
                    locationDropdown.classList.add('hidden');
                }
            });

            locationInput.addEventListener('keydown', function(e) {
                const items = locationDropdown.querySelectorAll('.autocomplete-item');
                
                if (e.key === 'ArrowDown') {
                    e.preventDefault();
                    selectedLocationIndex = Math.min(selectedLocationIndex + 1, items.length - 1);
                    updateSelection(items, selectedLocationIndex);
                } else if (e.key === 'ArrowUp') {
                    e.preventDefault();
                    selectedLocationIndex = Math.max(selectedLocationIndex - 1, -1);
                    updateSelection(items, selectedLocationIndex);
                } else if (e.key === 'Enter' && selectedLocationIndex >= 0) {
                    e.preventDefault();
                    items[selectedLocationIndex].click();
                } else if (e.key === 'Escape') {
                    locationDropdown.classList.add('hidden');
                }
            });

            // Close dropdowns when clicking outside
            document.addEventListener('click', function(e) {
                if (!provinceInput.contains(e.target) && !provinceDropdown.contains(e.target)) {
                    provinceDropdown.classList.add('hidden');
                }
                if (!locationInput.contains(e.target) && !locationDropdown.contains(e.target)) {
                    locationDropdown.classList.add('hidden');
                }
            });
        }

        function updateSelection(items, selectedIndex) {
            items.forEach((item, index) => {
                if (index === selectedIndex) {
                    item.classList.add('selected');
                } else {
                    item.classList.remove('selected');
                }
            });
        }

        function selectProvince(province) {
            document.getElementById('provinceInput').value = province;
            document.getElementById('selectedProvince').value = province;
            document.getElementById('provinceDropdown').classList.add('hidden');
            
            // Enable location input
            const locationInput = document.getElementById('locationInput');
            locationInput.disabled = false;
            locationInput.placeholder = '‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà... (‡πÄ‡∏ä‡πà‡∏ô ‡∏°‡∏à‡∏û.‡∏õ‡∏£‡∏≤‡∏à‡∏µ‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà‡∏Å‡πá‡πÑ‡∏î‡πâ)';
            locationInput.value = '';
            document.getElementById('selectedLocation').value = '';
        }

        function selectLocation(location) {
            document.getElementById('locationInput').value = location;
            document.getElementById('selectedLocation').value = location;
            document.getElementById('locationDropdown').classList.add('hidden');
        }

        function saveCustomLocation(province, location) {
            if (!location || !province) return;
            
            // Initialize province array if not exists
            if (!customLocations[province]) {
                customLocations[province] = [];
            }
            
            // Check if location already exists (in both default and custom)
            const defaultLocations = provinceData[province] || [];
            const existingCustom = customLocations[province];
            
            if (!defaultLocations.includes(location) && !existingCustom.includes(location)) {
                customLocations[province].push(location);
                localStorage.setItem('customLocations', JSON.stringify(customLocations));
            }
        }

        function handleLogin(e) {
            e.preventDefault();
            const username = document.getElementById('loginUsername').value.trim();
            const password = document.getElementById('loginPassword').value.trim();

            if (!username || !password) {
                alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô');
                return;
            }

            if (users[username] && users[username].password === password) {
                currentUser = username;
                document.getElementById('welcomeUser').textContent = `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ ${username}`;
                document.getElementById('loginScreen').classList.add('hidden');
                document.getElementById('mainApp').classList.remove('hidden');
                updateUserStats();
            } else {
                alert('‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
            }
        }

        function handleRegister(e) {
            e.preventDefault();
            const username = document.getElementById('registerUsername').value.trim();
            const password = document.getElementById('registerPassword').value.trim();
            const confirmPassword = document.getElementById('confirmPassword').value.trim();

            if (!username || !password || !confirmPassword) {
                alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô');
                return;
            }

            if (username.length < 3) {
                alert('‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 3 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£');
                return;
            }

            if (password.length < 4) {
                alert('‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 4 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£');
                return;
            }

            if (password !== confirmPassword) {
                alert('‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô');
                return;
            }

            if (users[username]) {
                alert('‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà');
            } else {
                users[username] = { password: password, province: '' };
                localStorage.setItem('fitTrackerUsers', JSON.stringify(users));
                alert('‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö');
                
                // Clear register form
                document.getElementById('registerUsername').value = '';
                document.getElementById('registerPassword').value = '';
                document.getElementById('confirmPassword').value = '';
                
                // Fill login form
                document.getElementById('loginUsername').value = username;
                document.getElementById('loginPassword').value = password;
            }
        }

        function handleLogout() {
            currentUser = null;
            document.getElementById('loginScreen').classList.remove('hidden');
            document.getElementById('mainApp').classList.add('hidden');
            
            // Clear all forms
            document.getElementById('loginUsername').value = '';
            document.getElementById('loginPassword').value = '';
            document.getElementById('registerUsername').value = '';
            document.getElementById('registerPassword').value = '';
            document.getElementById('confirmPassword').value = '';
        }

        function showSection(section) {
            // Hide all sections
            document.getElementById('runningSection').classList.add('hidden');
            document.getElementById('gymSection').classList.add('hidden');
            document.getElementById('statsSection').classList.add('hidden');
            document.getElementById('leaderboardSection').classList.add('hidden');

            // Reset tab styles
            document.querySelectorAll('nav button').forEach(btn => {
                if (btn.id !== 'logoutBtn') {
                    btn.className = 'px-4 py-2 bg-gray-200 text-gray-700 rounded-lg font-medium hover:bg-gray-300';
                }
            });

            // Show selected section and highlight tab
            if (section === 'running') {
                document.getElementById('runningSection').classList.remove('hidden');
                document.getElementById('runningTab').className = 'px-4 py-2 bg-blue-600 text-white rounded-lg font-medium';
            } else if (section === 'gym') {
                document.getElementById('gymSection').classList.remove('hidden');
                document.getElementById('gymTab').className = 'px-4 py-2 bg-blue-600 text-white rounded-lg font-medium';
            } else if (section === 'stats') {
                document.getElementById('statsSection').classList.remove('hidden');
                document.getElementById('statsTab').className = 'px-4 py-2 bg-blue-600 text-white rounded-lg font-medium';
                initializeCharts();
            } else if (section === 'leaderboard') {
                document.getElementById('leaderboardSection').classList.remove('hidden');
                document.getElementById('leaderboardTab').className = 'px-4 py-2 bg-blue-600 text-white rounded-lg font-medium';
                updateLeaderboard();
            }
        }

        function handleRunningCalculation(e) {
            e.preventDefault();
            
            const weight = parseFloat(document.getElementById('weight').value);
            const province = document.getElementById('selectedProvince').value;
            let location = document.getElementById('locationInput').value.trim();
            const distance = parseFloat(document.getElementById('distance').value);
            const distanceUnit = document.getElementById('distanceUnit').value;
            const speed = document.getElementById('runningSpeed').value;
            const rounds = parseInt(document.getElementById('rounds').value);
            
            if (!province) {
                alert(currentLanguage === 'th' ? '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î' : 'Please select province');
                return;
            }
            
            if (!speed) {
                alert(currentLanguage === 'th' ? '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß' : 'Please select speed level');
                return;
            }
            
            // If no location specified, use default
            if (!location) {
                location = '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà';
            } else {
                // Save custom location if it's new
                saveCustomLocation(province, location);
            }
            
            // Convert distance to kilometers
            let distanceInKm = distance;
            if (distanceUnit === 'm') {
                distanceInKm = distance / 1000;
            }
            
            const totalDistance = distanceInKm * rounds;
            
            // Calculate calories with speed multiplier
            const baseCalories = weight * totalDistance * 1.036; // Base running formula
            const speedMultiplier = speedMultipliers[speed];
            const calories = Math.round(baseCalories * speedMultiplier);
            
            // Save data
            const runningEntry = {
                user: currentUser,
                province: province,
                location: location,
                distance: totalDistance,
                distanceUnit: distanceUnit,
                speed: speed,
                calories: calories,
                date: new Date().toISOString(),
                week: getWeekNumber(new Date())
            };
            
            runningData.push(runningEntry);
            localStorage.setItem('runningData', JSON.stringify(runningData));
            
            // Update user's province
            users[currentUser].province = province;
            localStorage.setItem('fitTrackerUsers', JSON.stringify(users));
            
            // Show result
            const t = translations[currentLanguage];
            document.getElementById('runningResult').classList.remove('hidden');
            document.getElementById('runningCalories').textContent = `${calories} ${currentLanguage === 'th' ? '‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà' : 'calories'}`;
            
            const distanceText = distanceUnit === 'km' ? 
                `${totalDistance} ${currentLanguage === 'th' ? '‡∏Å‡∏°.' : 'km'}` : 
                `${distance * rounds} ${currentLanguage === 'th' ? '‡∏°.' : 'm'}`;
            
            const locationText = location === '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà' ? 
                (currentLanguage === 'th' ? '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà' : 'Location not specified') : 
                location;
            
            document.getElementById('runningDetails').textContent = 
                `${currentLanguage === 'th' ? '‡∏ß‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà' : 'Running at'} ${locationText}, ${province} ${currentLanguage === 'th' ? '‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á' : 'distance'} ${distanceText}`;
            
            updateUserStats();
        }

        function handleGymCalculation(e) {
            e.preventDefault();
            
            const weight = parseFloat(document.getElementById('gymWeight').value);
            const exerciseType = document.getElementById('exerciseType').value;
            const reps = parseInt(document.getElementById('reps').value);
            const sets = parseInt(document.getElementById('sets').value);
            
            const totalReps = reps * sets;
            const calories = Math.round(weight * totalReps * exerciseRates[exerciseType]);
            
            // Save data
            const gymEntry = {
                user: currentUser,
                exerciseType: exerciseType,
                reps: totalReps,
                sets: sets,
                calories: calories,
                date: new Date().toISOString(),
                week: getWeekNumber(new Date())
            };
            
            gymData.push(gymEntry);
            localStorage.setItem('gymData', JSON.stringify(gymData));
            
            // Show result
            document.getElementById('gymResult').classList.remove('hidden');
            document.getElementById('gymCalories').textContent = `${calories} ‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà`;
            document.getElementById('gymDetails').textContent = `${document.getElementById('exerciseType').options[document.getElementById('exerciseType').selectedIndex].text} ${totalReps} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á (${sets} ‡πÄ‡∏ã‡πá‡∏ï)`;
            
            updateUserStats();
        }

        function updateUserStats() {
            const currentWeek = getWeekNumber(new Date());
            
            // Running stats
            const userRunningData = runningData.filter(entry => 
                entry.user === currentUser && entry.week === currentWeek
            );
            
            const weeklyRunningCalories = userRunningData.reduce((sum, entry) => sum + entry.calories, 0);
            const weeklyDistance = userRunningData.reduce((sum, entry) => sum + entry.distance, 0);
            
            document.getElementById('weeklyCalories').textContent = `${weeklyRunningCalories} kcal`;
            document.getElementById('weeklyDistance').textContent = `${weeklyDistance.toFixed(1)} km`;
            
            // Gym stats
            const userGymData = gymData.filter(entry => 
                entry.user === currentUser && entry.week === currentWeek
            );
            
            const weeklyGymCalories = userGymData.reduce((sum, entry) => sum + entry.calories, 0);
            const weeklySets = userGymData.reduce((sum, entry) => sum + entry.sets, 0);
            
            document.getElementById('weeklyGymCalories').textContent = `${weeklyGymCalories} kcal`;
            document.getElementById('weeklySets').textContent = `${weeklySets} sets`;
            
            // Calculate rankings
            updateRankings();
        }

        function updateRankings() {
            const currentWeek = getWeekNumber(new Date());
            const userProvince = users[currentUser]?.province;
            
            // Running rankings
            const runningStats = {};
            runningData.filter(entry => entry.week === currentWeek).forEach(entry => {
                if (!runningStats[entry.user]) {
                    runningStats[entry.user] = { calories: 0, distance: 0, province: entry.province };
                }
                runningStats[entry.user].calories += entry.calories;
                runningStats[entry.user].distance += entry.distance;
            });
            
            const sortedRunning = Object.entries(runningStats)
                .sort((a, b) => b[1].calories - a[1].calories);
            
            // National rank
            const nationalRank = sortedRunning.findIndex(([user]) => user === currentUser) + 1;
            document.getElementById('nationalRank').textContent = nationalRank > 0 ? `#${nationalRank}` : '-';
            
            // Province rank
            const provinceRunning = sortedRunning.filter(([user, data]) => data.province === userProvince);
            const provinceRank = provinceRunning.findIndex(([user]) => user === currentUser) + 1;
            document.getElementById('provinceRank').textContent = provinceRank > 0 ? `#${provinceRank}` : '-';
            
            // Gym rankings
            const gymStats = {};
            gymData.filter(entry => entry.week === currentWeek).forEach(entry => {
                if (!gymStats[entry.user]) {
                    gymStats[entry.user] = { calories: 0, sets: 0 };
                }
                gymStats[entry.user].calories += entry.calories;
                gymStats[entry.user].sets += entry.sets;
            });
            
            const sortedGym = Object.entries(gymStats)
                .sort((a, b) => b[1].calories - a[1].calories);
            
            const gymRank = sortedGym.findIndex(([user]) => user === currentUser) + 1;
            document.getElementById('gymRank').textContent = gymRank > 0 ? `#${gymRank}` : '-';
        }

        function updateLeaderboard() {
            const filter = document.getElementById('leaderboardFilter').value;
            const currentWeek = getWeekNumber(new Date());
            const userProvince = users[currentUser]?.province;
            
            // Running leaderboard
            const runningStats = {};
            runningData.filter(entry => entry.week === currentWeek).forEach(entry => {
                if (!runningStats[entry.user]) {
                    runningStats[entry.user] = { calories: 0, distance: 0, province: entry.province };
                }
                runningStats[entry.user].calories += entry.calories;
                runningStats[entry.user].distance += entry.distance;
            });
            
            let filteredRunning = Object.entries(runningStats);
            if (filter === 'province') {
                filteredRunning = filteredRunning.filter(([user, data]) => data.province === userProvince);
            }
            
            const sortedRunning = filteredRunning.sort((a, b) => b[1].calories - a[1].calories);
            
            const runningLeaderboard = document.getElementById('runningLeaderboard');
            runningLeaderboard.innerHTML = '';
            
            sortedRunning.slice(0, 10).forEach(([user, data], index) => {
                const row = document.createElement('tr');
                row.className = user === currentUser ? 'bg-blue-50' : '';
                row.innerHTML = `
                    <td class="py-2 px-2 font-semibold">${index + 1}</td>
                    <td class="py-2 px-2">${user}</td>
                    <td class="py-2 px-2">${data.calories} kcal</td>
                    <td class="py-2 px-2">${data.distance.toFixed(1)} km</td>
                `;
                runningLeaderboard.appendChild(row);
            });
            
            // Gym leaderboard
            const gymStats = {};
            gymData.filter(entry => entry.week === currentWeek).forEach(entry => {
                if (!gymStats[entry.user]) {
                    gymStats[entry.user] = { calories: 0, sets: 0 };
                }
                gymStats[entry.user].calories += entry.calories;
                gymStats[entry.user].sets += entry.sets;
            });
            
            const sortedGym = Object.entries(gymStats)
                .sort((a, b) => b[1].calories - a[1].calories);
            
            const gymLeaderboard = document.getElementById('gymLeaderboard');
            gymLeaderboard.innerHTML = '';
            
            sortedGym.slice(0, 10).forEach(([user, data], index) => {
                const row = document.createElement('tr');
                row.className = user === currentUser ? 'bg-purple-50' : '';
                row.innerHTML = `
                    <td class="py-2 px-2 font-semibold">${index + 1}</td>
                    <td class="py-2 px-2">${user}</td>
                    <td class="py-2 px-2">${data.calories} kcal</td>
                    <td class="py-2 px-2">${data.sets} sets</td>
                `;
                gymLeaderboard.appendChild(row);
            });
        }

        function getWeekNumber(date) {
            const d = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));
            const dayNum = d.getUTCDay() || 7;
            d.setUTCDate(d.getUTCDate() + 4 - dayNum);
            const yearStart = new Date(Date.UTC(d.getUTCFullYear(),0,1));
            return Math.ceil((((d - yearStart) / 86400000) + 1)/7);
        }

        function initializeCharts() {
            if (!currentUser) return;
            
            // Destroy existing charts
            if (weeklyCaloriesChart) weeklyCaloriesChart.destroy();
            if (exerciseDistributionChart) exerciseDistributionChart.destroy();
            if (dailyProgressChart) dailyProgressChart.destroy();
            if (provinceComparisonChart) provinceComparisonChart.destroy();
            
            createWeeklyCaloriesChart();
            createExerciseDistributionChart();
            createDailyProgressChart();
            createProvinceComparisonChart();
        }

        function createWeeklyCaloriesChart() {
            const ctx = document.getElementById('weeklyCaloriesChart').getContext('2d');
            const weeks = [];
            const runningCalories = [];
            const gymCalories = [];
            
            // Get last 8 weeks of data
            const currentWeek = getWeekNumber(new Date());
            for (let i = 7; i >= 0; i--) {
                const week = currentWeek - i;
                weeks.push(`‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå ${week}`);
                
                const weekRunning = runningData.filter(entry => 
                    entry.user === currentUser && entry.week === week
                ).reduce((sum, entry) => sum + entry.calories, 0);
                
                const weekGym = gymData.filter(entry => 
                    entry.user === currentUser && entry.week === week
                ).reduce((sum, entry) => sum + entry.calories, 0);
                
                runningCalories.push(weekRunning);
                gymCalories.push(weekGym);
            }
            
            weeklyCaloriesChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: weeks,
                    datasets: [{
                        label: '‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πà‡∏á',
                        data: runningCalories,
                        borderColor: '#3B82F6',
                        backgroundColor: 'rgba(59, 130, 246, 0.1)',
                        tension: 0.4
                    }, {
                        label: '‡πÄ‡∏ß‡∏ó/‡∏Ñ‡∏≤‡∏£‡πå‡∏î‡∏¥‡πÇ‡∏≠',
                        data: gymCalories,
                        borderColor: '#8B5CF6',
                        backgroundColor: 'rgba(139, 92, 246, 0.1)',
                        tension: 0.4
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'top',
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: '‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà (kcal)'
                            }
                        }
                    }
                }
            });
        }

        function createExerciseDistributionChart() {
            const ctx = document.getElementById('exerciseDistributionChart').getContext('2d');
            const currentWeek = getWeekNumber(new Date());
            
            // Calculate running vs gym calories
            const runningTotal = runningData.filter(entry => 
                entry.user === currentUser && entry.week === currentWeek
            ).reduce((sum, entry) => sum + entry.calories, 0);
            
            const gymTotal = gymData.filter(entry => 
                entry.user === currentUser && entry.week === currentWeek
            ).reduce((sum, entry) => sum + entry.calories, 0);
            
            exerciseDistributionChart = new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: ['‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πà‡∏á', '‡πÄ‡∏ß‡∏ó/‡∏Ñ‡∏≤‡∏£‡πå‡∏î‡∏¥‡πÇ‡∏≠'],
                    datasets: [{
                        data: [runningTotal, gymTotal],
                        backgroundColor: ['#3B82F6', '#8B5CF6'],
                        borderWidth: 2,
                        borderColor: '#ffffff'
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom',
                        }
                    }
                }
            });
        }

        function createDailyProgressChart() {
            const ctx = document.getElementById('dailyProgressChart').getContext('2d');
            const days = [];
            const dailyCalories = [];
            
            // Get last 7 days
            for (let i = 6; i >= 0; i--) {
                const date = new Date();
                date.setDate(date.getDate() - i);
                const dayName = date.toLocaleDateString('th-TH', { weekday: 'short' });
                days.push(dayName);
                
                const dayCalories = [...runningData, ...gymData].filter(entry => {
                    const entryDate = new Date(entry.date);
                    return entry.user === currentUser && 
                           entryDate.toDateString() === date.toDateString();
                }).reduce((sum, entry) => sum + entry.calories, 0);
                
                dailyCalories.push(dayCalories);
            }
            
            dailyProgressChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: days,
                    datasets: [{
                        label: '‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏£‡∏ß‡∏°',
                        data: dailyCalories,
                        backgroundColor: 'rgba(34, 197, 94, 0.8)',
                        borderColor: '#22C55E',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: '‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà (kcal)'
                            }
                        }
                    }
                }
            });
        }

        function createProvinceComparisonChart() {
            const ctx = document.getElementById('provinceComparisonChart').getContext('2d');
            const currentWeek = getWeekNumber(new Date());
            
            // Calculate calories by province
            const provinceStats = {};
            [...runningData, ...gymData].filter(entry => entry.week === currentWeek).forEach(entry => {
                const province = entry.province || users[entry.user]?.province || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
                if (!provinceStats[province]) {
                    provinceStats[province] = 0;
                }
                provinceStats[province] += entry.calories;
            });
            
            const provinces = Object.keys(provinceStats).slice(0, 10);
            const calories = provinces.map(province => provinceStats[province]);
            
            provinceComparisonChart = new Chart(ctx, {
                type: 'horizontalBar',
                data: {
                    labels: provinces,
                    datasets: [{
                        label: '‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡∏£‡∏ß‡∏°',
                        data: calories,
                        backgroundColor: 'rgba(249, 115, 22, 0.8)',
                        borderColor: '#F97316',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        }
                    },
                    scales: {
                        x: {
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: '‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà (kcal)'
                            }
                        }
                    }
                }
            });
        }

        function addSampleData() {
            const sampleUsers = ['‡∏ô‡∏±‡∏Å‡∏ß‡∏¥‡πà‡∏á‡∏°‡∏∑‡∏≠‡πÇ‡∏õ‡∏£', '‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™‡∏Ñ‡∏¥‡∏á', '‡∏£‡∏±‡∏ô‡πÄ‡∏ô‡∏≠‡∏£‡πå‡∏´‡∏ç‡∏¥‡∏á', '‡πÄ‡∏ß‡∏ó‡πÄ‡∏ó‡∏£‡∏ô‡πÄ‡∏ô‡∏≠‡∏£‡πå', '‡∏Ñ‡∏≤‡∏£‡πå‡∏î‡∏¥‡πÇ‡∏≠‡∏Ñ‡∏ß‡∏µ‡∏ô'];
            const currentWeek = getWeekNumber(new Date());
            
            sampleUsers.forEach((user, index) => {
                users[user] = { password: '123456', province: Object.keys(provinceData)[index % 10] };
                
                // Add running data for multiple weeks
                for (let week = 0; week < 8; week++) {
                    for (let i = 0; i < Math.random() * 3 + 1; i++) {
                        const date = new Date();
                        date.setDate(date.getDate() - (week * 7) - Math.random() * 7);
                        
                        runningData.push({
                            user: user,
                            province: users[user].province,
                            location: provinceData[users[user].province][0],
                            distance: 3 + Math.random() * 7,
                            calories: 200 + Math.random() * 400,
                            date: date.toISOString(),
                            week: currentWeek - week
                        });
                    }
                }
                
                // Add gym data for multiple weeks
                for (let week = 0; week < 8; week++) {
                    for (let i = 0; i < Math.random() * 2 + 1; i++) {
                        const date = new Date();
                        date.setDate(date.getDate() - (week * 7) - Math.random() * 7);
                        
                        gymData.push({
                            user: user,
                            exerciseType: ['pushup', 'situp', 'squat', 'pullup'][Math.floor(Math.random() * 4)],
                            reps: 50 + Math.random() * 100,
                            sets: 3 + Math.random() * 2,
                            calories: 100 + Math.random() * 200,
                            date: date.toISOString(),
                            week: currentWeek - week
                        });
                    }
                }
            });
            
            localStorage.setItem('fitTrackerUsers', JSON.stringify(users));
            localStorage.setItem('runningData', JSON.stringify(runningData));
            localStorage.setItem('gymData', JSON.stringify(gymData));
        }
    </script>
<script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'98aeabd15460731f',t:'MTc1OTg1MzQ1My4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script></body>
</html>
